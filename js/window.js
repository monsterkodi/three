// koffee 1.12.0

/*
000   000  000  000   000  0000000     0000000   000   000
000 0 000  000  0000  000  000   000  000   000  000 0 000
000000000  000  000 0 000  000   000  000   000  000000000
000   000  000  000  0000  000   000  000   000  000   000
00     00  000  000   000  0000000     0000000   00     00
 */
var $, AmbientLight, BackSide, BoxBufferGeometry, BoxGeometry, Camera, Color, Fog, FogExp2, GridHelper, MainWin, Mesh, MeshLambertMaterial, MeshPhysicalMaterial, MeshStandardMaterial, PCFSoftShadowMap, PMREMGenerator, PlaneGeometry, PointLight, PointLightHelper, Quaternion, Raycaster, Scene, SphereGeometry, Vector2, WebGLRenderer, deg2rad, keyinfo, klog, kpos, ref, ref1, win,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), $ = ref.$, deg2rad = ref.deg2rad, keyinfo = ref.keyinfo, klog = ref.klog, kpos = ref.kpos, win = ref.win;

ref1 = require('three'), Fog = ref1.Fog, FogExp2 = ref1.FogExp2, AmbientLight = ref1.AmbientLight, BackSide = ref1.BackSide, BoxBufferGeometry = ref1.BoxBufferGeometry, BoxGeometry = ref1.BoxGeometry, Camera = ref1.Camera, Color = ref1.Color, GridHelper = ref1.GridHelper, Mesh = ref1.Mesh, MeshLambertMaterial = ref1.MeshLambertMaterial, MeshPhysicalMaterial = ref1.MeshPhysicalMaterial, MeshStandardMaterial = ref1.MeshStandardMaterial, PCFSoftShadowMap = ref1.PCFSoftShadowMap, PMREMGenerator = ref1.PMREMGenerator, PlaneGeometry = ref1.PlaneGeometry, PointLight = ref1.PointLight, PointLightHelper = ref1.PointLightHelper, Quaternion = ref1.Quaternion, Raycaster = ref1.Raycaster, Scene = ref1.Scene, SphereGeometry = ref1.SphereGeometry, Vector2 = ref1.Vector2, WebGLRenderer = ref1.WebGLRenderer;

Camera = require('./camera');

MainWin = (function(superClass) {
    extend(MainWin, superClass);

    function MainWin() {
        this.onMenuAction = bind(this.onMenuAction, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        this.onKeyUp = bind(this.onKeyUp, this);
        this.onKeyDown = bind(this.onKeyDown, this);
        this.onResize = bind(this.onResize, this);
        this.renderScene = bind(this.renderScene, this);
        this.onLoad = bind(this.onLoad, this);
        MainWin.__super__.constructor.call(this, {
            dir: __dirname,
            pkg: require('../package.json'),
            menu: '../coffee/menu.noon',
            icon: '../img/mini.png',
            prefsSeperator: 'â–¸',
            context: false,
            onLoad: this.onLoad
        });
        this.mouse = new Vector2;
        this.options = {
            dither: true,
            shadow: true,
            fog: true
        };
        addEventListener('pointerdown', this.onMouseDown);
        addEventListener('pointermove', this.onMouseMove);
        addEventListener('pointerup', this.onMouseUp);
    }

    MainWin.prototype.onLoad = function() {
        window.onresize = this.onResize;
        this.initScene($("#main"));
        return requestAnimationFrame(this.renderScene);
    };

    MainWin.prototype.initScene = function(view) {
        var box, br, geometry, material, sphere;
        this.view = view;
        this.renderer = new WebGLRenderer({
            antialias: true,
            precision: 'highp'
        });
        this.renderer.setSize(this.view.offsetWidth, this.view.offsetHeight);
        this.renderer.autoClear = false;
        this.renderer.sortObjects = true;
        this.renderer.shadowMap.type = PCFSoftShadowMap;
        this.renderer.shadowMap.enabled = true;
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.view.appendChild(this.renderer.domElement);
        this.fogColor = new Color('hsl(180, 0%, 4%)');
        this.onResize();
        br = this.renderer.domElement.getBoundingClientRect();
        this.viewOffset = new Vector2(br.left, br.top);
        this.scene = new Scene();
        this.scene.background = this.fogColor;
        this.camera = new Camera({
            view: this.view
        });
        this.sun = new PointLight(0xffffff, 2, 200);
        this.sun.position.set(0, 10, 0);
        this.sun.castShadow = true;
        this.sun.shadow.mapSize = new Vector2(2 * 2048, 2 * 2048);
        this.scene.add(this.sun);
        this.scene.add(new PointLightHelper(this.sun, 1));
        this.ambient = new AmbientLight(0x181818);
        this.scene.add(this.ambient);
        material = new MeshStandardMaterial({
            metalness: 0.6,
            roughness: 0.3,
            color: 0x5555ff
        });
        geometry = new BoxGeometry(1, 1, 1);
        box = new Mesh(geometry, material.clone());
        box.position.set(0, 1, 0);
        box.castShadow = true;
        box.receiveShadow = true;
        box.name = 'box';
        this.scene.add(box);
        material.color = new Color(0xff0000);
        material.flatShading = true;
        material.metalness = 0.9;
        geometry = new SphereGeometry(1, 10, 10);
        sphere = new Mesh(geometry, material);
        sphere.position.set(2, 1, 1);
        sphere.castShadow = true;
        sphere.receiveShadow = true;
        sphere.name = 'sphere';
        this.scene.add(sphere);
        material = new MeshStandardMaterial({
            metalness: 0.0,
            color: new Color('hsl(180,0%,4%)'),
            roughness: 1.0,
            flatShading: true
        });
        geometry = new PlaneGeometry(1000, 1000, 10);
        geometry.quaternion = new Quaternion;
        this.plane = new Mesh(geometry, material);
        this.plane.castShadow = false;
        this.plane.receiveShadow = true;
        this.plane.name = 'plane';
        this.plane.rotation.set(deg2rad(-90), 0, 0);
        this.scene.add(this.plane);
        this.scene.fog = new Fog(this.fogColor, 10, 100);
        this.setFog(this.options.fog);
        this.setDither(this.options.dither);
        return this.raycaster = new Raycaster;
    };

    MainWin.prototype.toggleDither = function() {
        return this.setDither(!this.options.dither);
    };

    MainWin.prototype.toggleFog = function() {
        return this.setFog(!this.options.fog);
    };

    MainWin.prototype.setDither = function(d) {
        this.options.dither = d;
        return this.scene.traverse(function(node) {
            if (node instanceof Mesh) {
                node.material.dithering = d;
                return node.material.needsUpdate = true;
            }
        });
    };

    MainWin.prototype.setFog = function(f) {
        this.options.fog = f;
        if (f) {
            this.scene.fog.near = 50;
            return this.scene.fog.far = 100;
        } else {
            this.scene.fog.near = 99999;
            return this.scene.fog.far = 99999 + 1;
        }
    };

    MainWin.prototype.toggleGrid = function() {
        if (this.grid) {
            this.scene.remove(this.grid);
            return delete this.grid;
        } else {
            this.grid = new GridHelper(100, 100, 0xffffff, 0x0);
            return this.scene.add(this.grid);
        }
    };

    MainWin.prototype.renderScene = function() {
        this.sun.position.copy(this.camera.getPosition());
        this.sun.position.add(this.camera.getUp().multiplyScalar(3.0));
        this.sun.position.add(this.camera.getRight().multiplyScalar(-3.0));
        this.renderer.render(this.scene, this.camera);
        return requestAnimationFrame(this.renderScene);
    };

    MainWin.prototype.onResize = function() {
        var h, ref2, w;
        w = this.view.clientWidth;
        h = this.view.clientHeight;
        this.aspect = w / h;
        this.viewSize = kpos(w, h);
        if (this.camera != null) {
            this.camera.aspect = this.aspect;
            this.camera.size = this.viewSize;
            this.camera.updateProjectionMatrix();
        }
        return (ref2 = this.renderer) != null ? ref2.setSize(w, h) : void 0;
    };

    MainWin.prototype.onKeyDown = function(event) {
        var char, combo, key, mod, ref2;
        ref2 = keyinfo.forEvent(event), mod = ref2.mod, key = ref2.key, combo = ref2.combo, char = ref2.char;
        switch (key) {
            case 'w':
                this.camera.startMoveForward();
                break;
            case 's':
                this.camera.startMoveBackward();
                break;
            case 'a':
                this.camera.startMoveLeft();
                break;
            case 'd':
                this.camera.startMoveRight();
                break;
            case 'q':
                this.camera.startMoveDown();
                break;
            case 'e':
                this.camera.startMoveUp();
                break;
            case 'left':
                this.camera.startPivotLeft();
                break;
            case 'right':
                this.camera.startPivotRight();
                break;
            case 'up':
                this.camera.startPivotUp();
                break;
            case 'down':
                this.camera.startPivotDown();
                break;
            case 'g':
                this.toggleGrid();
                break;
            case 'f':
                this.toggleFog();
                break;
            case 't':
                this.toggleDither();
                break;
            default:
                klog('keyDown', mod, key, combo, char, event.which);
        }
        return MainWin.__super__.onKeyDown.apply(this, arguments);
    };

    MainWin.prototype.onKeyUp = function(event) {
        var char, combo, key, mod, ref2;
        ref2 = keyinfo.forEvent(event), mod = ref2.mod, key = ref2.key, combo = ref2.combo, char = ref2.char;
        return MainWin.__super__.onKeyUp.apply(this, arguments);
    };

    MainWin.prototype.mouseEvent = function(event) {
        if (this.viewOffset) {
            this.mouse.x = ((event.clientX - this.viewOffset.x) / this.view.clientWidth) * 2 - 1;
            return this.mouse.y = -((event.clientY - this.viewOffset.y) / this.view.clientHeight) * 2 + 1;
        }
    };

    MainWin.prototype.onMouseMove = function(event) {
        return this.mouseEvent(event);
    };

    MainWin.prototype.onMouseUp = function(event) {
        return this.mouseEvent(event);
    };

    MainWin.prototype.onMouseDown = function(event) {
        this.mouseEvent(event);
        return this.pickObject();
    };

    MainWin.prototype.pickObject = function() {
        var i, intersect, len, ref2, ref3;
        this.raycaster.setFromCamera(this.mouse, this.camera);
        ref2 = this.raycaster.intersectObjects(this.scene.children);
        for (i = 0, len = ref2.length; i < len; i++) {
            intersect = ref2[i];
            if ((intersect != null ? (ref3 = intersect.object) != null ? ref3.type : void 0 : void 0) === 'Mesh') {
                if (intersect.object.name !== 'plane') {
                    this.camera.fadeToPos(intersect.object.position);
                    return;
                }
            }
        }
    };

    MainWin.prototype.onMenuAction = function(action, args) {
        return MainWin.__super__.onMenuAction.apply(this, arguments);
    };

    return MainWin;

})(win);

new MainWin;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/window.coffee