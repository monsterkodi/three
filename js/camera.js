// koffee 1.12.0

/*
 0000000   0000000   00     00  00000000  00000000    0000000 
000       000   000  000   000  000       000   000  000   000
000       000000000  000000000  0000000   0000000    000000000
000       000   000  000 0 000  000       000   000  000   000
 0000000  000   000  000   000  00000000  000   000  000   000
 */
var Camera, THREE, clamp, deg2rad, klog, kpos, reduce, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), clamp = ref.clamp, deg2rad = ref.deg2rad, klog = ref.klog, kpos = ref.kpos, reduce = ref.reduce;

THREE = require('three');

Camera = (function(superClass) {
    extend(Camera, superClass);

    function Camera(arg) {
        var height, ref1, view, width;
        view = (ref1 = arg.view) != null ? ref1 : null;
        this.setDistFactor = bind(this.setDistFactor, this);
        this.inertZoom = bind(this.inertZoom, this);
        this.onMouseWheel = bind(this.onMouseWheel, this);
        this.moveCenter = bind(this.moveCenter, this);
        this.fadeCenter = bind(this.fadeCenter, this);
        this.pivotCenter = bind(this.pivotCenter, this);
        this.animationStep = bind(this.animationStep, this);
        this.onMouseDrag = bind(this.onMouseDrag, this);
        this.onDblClick = bind(this.onDblClick, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.del = bind(this.del, this);
        this.elem = view;
        width = this.elem.clientWidth;
        height = this.elem.clientHeight;
        klog("width " + width + " height " + height);
        Camera.__super__.constructor.call(this, 70, width / height, 0.01, 300);
        this.center = new THREE.Vector3(0, 0, 0);
        this.size = new THREE.Vector2(width, height);
        this.pivot = new THREE.Vector2;
        this.move = new THREE.Vector3;
        this.dist = 10;
        this.maxDist = this.far / 4;
        this.minDist = 0.9;
        this.degree = 0;
        this.rotate = 0;
        this.wheelInert = 0;
        this.animations = [];
        this.elem.addEventListener('mousewheel', this.onMouseWheel);
        this.elem.addEventListener('mousedown', this.onMouseDown);
        this.elem.addEventListener('keypress', this.onKeyPress);
        this.elem.addEventListener('keyrelease', this.onKeyRelease);
        this.elem.addEventListener('dblclick', this.onDblClick);
        this.update();
        requestAnimationFrame(this.animationStep);
    }

    Camera.prototype.getPosition = function() {
        return this.position;
    };

    Camera.prototype.getDir = function() {
        return new THREE.Vector3(0, 0, -1).applyQuaternion(this.quaternion);
    };

    Camera.prototype.getUp = function() {
        return new THREE.Vector3(0, 1, 0).applyQuaternion(this.quaternion);
    };

    Camera.prototype.getRight = function() {
        return new THREE.Vector3(1, 0, 0).applyQuaternion(this.quaternion);
    };

    Camera.prototype.del = function() {
        this.elem.removeEventListener('keypress', this.onKeyPress);
        this.elem.removeEventListener('keyrelease', this.onKeyRelease);
        this.elem.removeEventListener('mousewheel', this.onMouseWheel);
        this.elem.removeEventListener('mousedown', this.onMouseDown);
        this.elem.removeEventListener('dblclick', this.onDblClick);
        window.removeEventListener('mouseup', this.onMouseUp);
        return window.removeEventListener('mousemove', this.onMouseDrag);
    };

    Camera.prototype.onMouseDown = function(event) {
        this.downButtons = event.buttons;
        this.mouseMoved = false;
        this.mouseX = event.clientX;
        this.mouseY = event.clientY;
        this.downPos = kpos(this.mouseX, this.mouseY);
        window.addEventListener('mousemove', this.onMouseDrag);
        return window.addEventListener('mouseup', this.onMouseUp);
    };

    Camera.prototype.onMouseUp = function(event) {
        window.removeEventListener('mousemove', this.onMouseDrag);
        return window.removeEventListener('mouseup', this.onMouseUp);
    };

    Camera.prototype.onDblClick = function(event) {};

    Camera.prototype.onMouseDrag = function(event) {
        var s, x, y;
        x = event.clientX - this.mouseX;
        y = event.clientY - this.mouseY;
        this.mouseX = event.clientX;
        this.mouseY = event.clientY;
        if (this.downPos.dist(kpos(this.mouseX, this.mouseY)) > 60) {
            this.mouseMoved = true;
        }
        if (event.buttons & 4) {
            s = this.dist;
            this.pan(x * 2 * s / this.size.x, y * s / this.size.y);
        }
        if (event.buttons & 2) {
            return this.setPivot(new THREE.Vector2(360 * x / this.size.x, 180 * y / this.size.y));
        }
    };

    Camera.prototype.animate = function(func) {
        return this.animations.push(func);
    };

    Camera.prototype.animationStep = function() {
        var animation, delta, i, len, now, oldAnimations;
        now = window.performance.now();
        delta = (now - this.lastAnimationTime) * 0.001;
        this.lastAnimationTime = now;
        oldAnimations = this.animations.clone();
        this.animations = [];
        for (i = 0, len = oldAnimations.length; i < len; i++) {
            animation = oldAnimations[i];
            animation(delta);
        }
        return requestAnimationFrame(this.animationStep);
    };

    Camera.prototype.setPivot = function(p) {
        this.rotate += -p.x;
        this.degree += -p.y;
        return this.update();
    };

    Camera.prototype.startPivotLeft = function() {
        this.pivot.x = -1;
        return this.startPivot();
    };

    Camera.prototype.startPivotRight = function() {
        this.pivot.x = 1;
        return this.startPivot();
    };

    Camera.prototype.startPivotUp = function() {
        this.pivot.y = -1;
        return this.startPivot();
    };

    Camera.prototype.startPivotDown = function() {
        this.pivot.y = 1;
        return this.startPivot();
    };

    Camera.prototype.stopPivot = function() {
        this.pivoting = false;
        return this.pivot.set(0, 0);
    };

    Camera.prototype.startPivot = function() {
        if (!this.pivoting) {
            this.animate(this.pivotCenter);
            return this.pivoting = true;
        }
    };

    Camera.prototype.pivotCenter = function(deltaSeconds) {
        if (!this.pivoting) {
            return;
        }
        this.setPivot(this.pivot);
        this.pivot.multiplyScalar(0.96);
        if (this.pivot.length() > 0.001) {
            return this.animate(this.pivotCenter);
        } else {
            return this.stopPivot();
        }
    };

    Camera.prototype.pan = function(x, y) {
        var ref1, right, up;
        right = new THREE.Vector3(-x, 0, 0);
        right.applyQuaternion(this.quaternion);
        up = new THREE.Vector3(0, y, 0);
        up.applyQuaternion(this.quaternion);
        this.center.add(right.add(up));
        if ((ref1 = this.centerTarget) != null) {
            ref1.copy(this.center);
        }
        return this.update();
    };

    Camera.prototype.focusOnPos = function(v) {
        this.centerTarget = new THREE.Vector3(v);
        this.center = new THREE.Vector3(v);
        return this.update();
    };

    Camera.prototype.fadeToPos = function(v) {
        this.centerTarget = new THREE.Vector3(v);
        return this.startFadeCenter();
    };

    Camera.prototype.startFadeCenter = function() {
        if (!this.fading) {
            this.animate(this.fadeCenter);
            return this.fading = true;
        }
    };

    Camera.prototype.fadeCenter = function(deltaSeconds) {
        if (!this.fading) {
            return;
        }
        this.center.fade(this.centerTarget, deltaSeconds);
        this.update();
        if (this.center.dist(this.centerTarget) > 0.00001) {
            return this.animate(this.fadeCenter);
        } else {
            return delete this.fading;
        }
    };

    Camera.prototype.moveFactor = function() {
        return this.dist / 2;
    };

    Camera.prototype.startMoveLeft = function() {
        this.move.x = -this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveRight = function() {
        this.move.x = this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveUp = function() {
        this.move.y = this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveDown = function() {
        this.move.y = -this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveForward = function() {
        this.move.z = -this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveBackward = function() {
        this.move.z = this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.stopMoving = function() {
        this.moving = false;
        return this.move.set(0, 0, 0);
    };

    Camera.prototype.startMove = function() {
        this.fading = false;
        if (!this.moving) {
            this.animate(this.moveCenter);
            return this.moving = true;
        }
    };

    Camera.prototype.moveCenter = function(deltaSeconds) {
        var dir;
        if (!this.moving) {
            return;
        }
        dir = new THREE.Vector3;
        dir.add(this.move);
        dir.multiplyScalar(deltaSeconds);
        dir.applyQuaternion(this.quaternion);
        this.center.add(dir);
        this.update();
        this.move.multiplyScalar(0.96);
        if (this.move.length() > 0.001) {
            return this.animate(this.moveCenter);
        } else {
            return this.stopMoving();
        }
    };

    Camera.prototype.onMouseWheel = function(event) {
        if (this.wheelInert > 0 && event.wheelDelta < 0) {
            this.wheelInert = 0;
            return;
        }
        if (this.wheelInert < 0 && event.wheelDelta > 0) {
            this.wheelInert = 0;
            return;
        }
        this.wheelInert += event.wheelDelta * (1 + (this.dist / this.maxDist) * 3) * 0.0001;
        return this.startZoom();
    };

    Camera.prototype.startZoomIn = function() {
        this.wheelInert = (1 + (this.dist / this.maxDist) * 3) * 10;
        return this.startZoom();
    };

    Camera.prototype.startZoomOut = function() {
        this.wheelInert = -(1 + (this.dist / this.maxDist) * 3) * 10;
        return this.startZoom();
    };

    Camera.prototype.startZoom = function() {
        if (!this.zooming) {
            this.animate(this.inertZoom);
            return this.zooming = true;
        }
    };

    Camera.prototype.stopZoom = function() {
        this.wheelInert = 0;
        return this.zooming = false;
    };

    Camera.prototype.inertZoom = function(deltaSeconds) {
        this.setDistFactor(1 - clamp(-0.02, 0.02, this.wheelInert));
        this.wheelInert = reduce(this.wheelInert, deltaSeconds * 0.3);
        if (Math.abs(this.wheelInert) > 0.00000001) {
            return this.animate(this.inertZoom);
        } else {
            delete this.zooming;
            return this.wheelInert = 0;
        }
    };

    Camera.prototype.setDistFactor = function(factor) {
        this.dist = clamp(this.minDist, this.maxDist, this.dist * factor);
        return this.update();
    };

    Camera.prototype.setFov = function(fov) {
        return this.fov = Math.max(2.0, Math.min(fov, 175.0));
    };

    Camera.prototype.update = function() {
        var pitchRot;
        this.degree = clamp(-90, 90, this.degree);
        this.quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), deg2rad(this.rotate));
        pitchRot = new THREE.Quaternion;
        pitchRot.setFromAxisAngle(new THREE.Vector3(1, 0, 0), deg2rad(this.degree));
        this.quaternion.multiply(pitchRot);
        this.position.copy(this.center);
        return this.position.add(new THREE.Vector3(0, 0, this.dist).applyQuaternion(this.quaternion));
    };

    return Camera;

})(THREE.PerspectiveCamera);

module.exports = Camera;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FtZXJhLmpzIiwic291cmNlUm9vdCI6Ii4uL2NvZmZlZSIsInNvdXJjZXMiOlsiY2FtZXJhLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSxzREFBQTtJQUFBOzs7O0FBUUEsTUFBeUMsT0FBQSxDQUFRLEtBQVIsQ0FBekMsRUFBRSxpQkFBRixFQUFTLHFCQUFULEVBQWtCLGVBQWxCLEVBQXdCLGVBQXhCLEVBQThCOztBQUU5QixLQUFBLEdBQVEsT0FBQSxDQUFRLE9BQVI7O0FBRUY7OztJQUVDLGdCQUFDLEdBQUQ7QUFFQyxZQUFBO1FBRkEsMENBQUc7Ozs7Ozs7Ozs7Ozs7UUFFSCxJQUFDLENBQUEsSUFBRCxHQUFRO1FBQ1IsS0FBQSxHQUFTLElBQUMsQ0FBQSxJQUFJLENBQUM7UUFDZixNQUFBLEdBQVMsSUFBQyxDQUFBLElBQUksQ0FBQztRQUVmLElBQUEsQ0FBSyxRQUFBLEdBQVMsS0FBVCxHQUFlLFVBQWYsR0FBeUIsTUFBOUI7UUFFQSx3Q0FBTSxFQUFOLEVBQVUsS0FBQSxHQUFNLE1BQWhCLEVBQXdCLElBQXhCLEVBQThCLEdBQTlCO1FBRUEsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFJLEtBQUssQ0FBQyxPQUFWLENBQWtCLENBQWxCLEVBQW9CLENBQXBCLEVBQXNCLENBQXRCO1FBQ2QsSUFBQyxDQUFBLElBQUQsR0FBYyxJQUFJLEtBQUssQ0FBQyxPQUFWLENBQWtCLEtBQWxCLEVBQXlCLE1BQXpCO1FBQ2QsSUFBQyxDQUFBLEtBQUQsR0FBYyxJQUFJLEtBQUssQ0FBQztRQUN4QixJQUFDLENBQUEsSUFBRCxHQUFjLElBQUksS0FBSyxDQUFDO1FBQ3hCLElBQUMsQ0FBQSxJQUFELEdBQWM7UUFDZCxJQUFDLENBQUEsT0FBRCxHQUFjLElBQUMsQ0FBQSxHQUFELEdBQUs7UUFDbkIsSUFBQyxDQUFBLE9BQUQsR0FBYztRQUNkLElBQUMsQ0FBQSxNQUFELEdBQWM7UUFDZCxJQUFDLENBQUEsTUFBRCxH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Vzs7cUJBS2YsTUFBQSxHQUFRLFNBQUMsR0FBRDtlQUFTLElBQUMsQ0FBQSxHQUFELEdBQU8sSUFBSSxDQUFDLEdBQUwsQ0FBUyxHQUFULEVBQWMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxHQUFULEVBQWMsS0FBZCxDQUFkO0lBQWhCOztxQkFRUixNQUFBLEdBQVEsU0FBQTtBQUVKLFlBQUE7UUFBQSxJQUFDLENBQUEsTUFBRCxHQUFVLEtBQUEsQ0FBTSxDQUFDLEVBQVAsRUFBVSxFQUFWLEVBQWEsSUFBQyxDQUFBLE1BQWQ7UUFFVixJQUFDLENBQUEsVUFBVSxDQUFDLGdCQUFaLENBQTZCLElBQUksS0FBSyxDQUFDLE9BQVYsQ0FBa0IsQ0FBbEIsRUFBb0IsQ0FBcEIsRUFBc0IsQ0FBdEIsQ0FBN0IsRUFBdUQsT0FBQSxDQUFRLElBQUMsQ0FBQSxNQUFULENBQXZEO1FBRUEsUUFBQSxHQUFXLElBQUksS0FBSyxDQUFDO1FBQ3JCLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixJQUFJLEtBQUssQ0FBQyxPQUFWLENBQWtCLENBQWxCLEVBQW9CLENBQXBCLEVBQXNCLENBQXRCLENBQTFCLEVBQW9ELE9BQUEsQ0FBUSxJQUFDLENBQUEsTUFBVCxDQUFwRDtRQUVBLElBQUMsQ0FBQSxVQUFVLENBQUMsUUFBWixDQUFxQixRQUFyQjtRQUVBLElBQUMsQ0FBQSxRQUFRLENBQUMsSUFBVixDQUFlLElBQUMsQ0FBQSxNQUFoQjtlQUNBLElBQUMsQ0FBQSxRQUFRLENBQUMsR0FBVixDQUFjLElBQUksS0FBSyxDQUFDLE9BQVYsQ0FBa0IsQ0FBbEIsRUFBb0IsQ0FBcEIsRUFBc0IsSUFBQyxDQUFBLElBQXZCLENBQTRCLENBQUMsZUFBN0IsQ0FBNkMsSUFBQyxDQUFBLFVBQTlDLENBQWQ7SUFaSTs7OztHQTFXUyxLQUFLLENBQUM7O0FBMFgzQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgICAwMDAwMDAwICAgMDAgICAgIDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgICAgMDAwMDAwMCBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4wMDAgICAgICAgMDAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAwMFxuMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4jIyNcblxueyBjbGFtcCwgZGVnMnJhZCwga2xvZywga3BvcywgcmVkdWNlIH0gPSByZXF1aXJlICdreGsnXG5cblRIUkVFID0gcmVxdWlyZSAndGhyZWUnXG5cbmNsYXNzIENhbWVyYSBleHRlbmRzIFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhXG5cbiAgICBAOiAodmlldzopIC0+XG4gICAgICAgIFxuICAgICAgICBAZWxlbSA9IHZpZXdcbiAgICAgICAgd2lkdGggID0gQGVsZW0uY2xpZW50V2lkdGhcbiAgICAgICAgaGVpZ2h0ID0gQGVsZW0uY2xpZW50SGVpZ2h0XG4gICAgICAgIFxuICAgICAgICBrbG9nIFwid2lkdGggI3t3aWR0aH0gaGVpZ2h0ICN7aGVpZ2h0fVwiXG4gICAgICAgIFxuICAgICAgICBzdXBlciA3MCwgd2lkdGgvaGVpZ2h0LCAwLjAxLCAzMDAgIyBmb3YsIGFzcGVjdCwgbmVhciwgZmFyXG4gICAgICAgIFxuICAgICAgICBAY2VudGVyICAgICA9IG5ldyBUSFJFRS5WZWN0b3IzIDAgMCAwXG4gICAgICAgIEBzaXplICAgICAgID0gbmV3IFRIUkVFLlZlY3RvcjIgd2lkdGgsIGhlaWdodCBcbiAgICAgICAgQHBpdm90ICAgICAgPSBuZXcgVEhSRUUuVmVjdG9yMlxuICAgICAgICBAbW92ZSAgICAgICA9IG5ldyBUSFJFRS5WZWN0b3IzXG4gICAgICAgIEBkaXN0ICAgICAgID0gMTBcbiAgICAgICAgQG1heERpc3QgICAgPSBAZmFyLzRcbiAgICAgICAgQG1pbkRpc3QgICAgPSAwLjlcbiAgICAgICAgQGRlZ3JlZSAgICAgPSAwXG4gICAgICAgIEByb3RhdGUgICAgID0gMFxuICAgICAgICBAd2hlZWxJbmVydCA9IDBcbiAgICAgICAgQGFuaW1hdGlvbnMgPSBbXVxuXG4gICAgICAgIEBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNld2hlZWwnIEBvbk1vdXNlV2hlZWxcbiAgICAgICAgQGVsZW0uYWRkRXZlbnRMaXN0ZW5lciAnbW91c2Vkb3duJyAgQG9uTW91c2VEb3duXG4gICAgICAgIEBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgJ2tleXByZXNzJyAgIEBvbktleVByZXNzXG4gICAgICAgIEBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgJ2tleXJlbGVhc2UnIEBvbktleVJlbGVhc2VcbiAgICAgICAgQGVsZW0uYWRkRXZlbnRMaXN0ZW5lciAnZGJsY2xpY2snICAgQG9uRGJsQ2xpY2tcbiAgICAgICAgXG4gICAgICAgIEB1cGRhdGUoKVxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQGFuaW1hdGlvblN0ZXBcblxuICAgIGdldFBvc2l0aW9uOiAtPiBAcG9zaXRpb25cbiAgICBnZXREaXI6ICAgICAgLT4gbmV3IFRIUkVFLlZlY3RvcjMoMCAwIC0xKS5hcHBseVF1YXRlcm5pb24gQHF1YXRlcm5pb24gXG4gICAgZ2V0VXA6ICAgICAgIC0+IG5ldyBUSFJFRS5WZWN0b3IzKDAgMSAgMCkuYXBwbHlRdWF0ZXJuaW9uIEBxdWF0ZXJuaW9uICBcbiAgICBnZXRSaWdodDogICAgLT4gbmV3IFRIUkVFLlZlY3RvcjMoMSAwICAwKS5hcHBseVF1YXRlcm5pb24gQHF1YXRlcm5pb24gIFxuXG4gICAgZGVsOiA9PlxuICAgICAgICBcbiAgICAgICAgQGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciAgJ2tleXByZXNzJyAgIEBvbktleVByZXNzXG4gICAgICAgIEBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgICdrZXlyZWxlYXNlJyBAb25LZXlSZWxlYXNlXG4gICAgICAgIEBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgICdtb3VzZXdoZWVsJyBAb25Nb3VzZVdoZWVsXG4gICAgICAgIEBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgICdtb3VzZWRvd24nICBAb25Nb3VzZURvd25cbiAgICAgICAgQGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciAgJ2RibGNsaWNrJyAgIEBvbkRibENsaWNrXG4gICAgICAgIFxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciAnbW91c2V1cCcgICAgQG9uTW91c2VVcFxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciAnbW91c2Vtb3ZlJyAgQG9uTW91c2VEcmFnIFxuICAgICAgICBcbiAgICAjIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIFxuICAgIFxuICAgIG9uTW91c2VEb3duOiAoZXZlbnQpID0+IFxuICAgICAgICBcbiAgICAgICAgQGRvd25CdXR0b25zID0gZXZlbnQuYnV0dG9uc1xuICAgICAgICBAbW91c2VNb3ZlZCAgPSBmYWxzZVxuICAgICAgICAgICAgXG4gICAgICAgIEBtb3VzZVggPSBldmVudC5jbGllbnRYXG4gICAgICAgIEBtb3VzZVkgPSBldmVudC5jbGllbnRZXG4gICAgICAgIFxuICAgICAgICBAZG93blBvcyA9IGtwb3MgQG1vdXNlWCwgQG1vdXNlWVxuICAgICAgICBcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNlbW92ZScgQG9uTW91c2VEcmFnXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICdtb3VzZXVwJyAgIEBvbk1vdXNlVXBcbiAgICAgICAgXG4gICAgb25Nb3VzZVVwOiAoZXZlbnQpID0+IFxuXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyICdtb3VzZW1vdmUnIEBvbk1vdXNlRHJhZ1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciAnbW91c2V1cCcgICBAb25Nb3VzZVVwXG4gICAgICAgIFxuICAgIG9uRGJsQ2xpY2s6IChldmVudCkgPT5cbiAgICAgICAgXG4gICAgb25Nb3VzZURyYWc6IChldmVudCkgPT5cblxuICAgICAgICB4ID0gZXZlbnQuY2xpZW50WC1AbW91c2VYXG4gICAgICAgIHkgPSBldmVudC5jbGllbnRZLUBtb3VzZVlcbiAgICAgICAgXG4gICAgICAgIEBtb3VzZVggPSBldmVudC5jbGllbnRYXG4gICAgICAgIEBtb3VzZVkgPSBldmVudC5jbGllbnRZXG4gICAgICAgIFxuICAgICAgICBpZiBAZG93blBvcy5kaXN0KGtwb3MgQG1vdXNlWCwgQG1vdXNlWSkgPiA2MFxuICAgICAgICAgICAgQG1vdXNlTW92ZWQgPSB0cnVlXG4gICAgICAgIFxuICAgICAgICBpZiBldmVudC5idXR0b25zICYgNFxuICAgICAgICAgICAgcyA9IEBkaXN0XG4gICAgICAgICAgICBAcGFuIHgqMipzL0BzaXplLngsIHkqcy9Ac2l6ZS55XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgZXZlbnQuYnV0dG9ucyAmIDJcbiAgICAgICAgICAgIEBzZXRQaXZvdCBuZXcgVEhSRUUuVmVjdG9yMiAzNjAqeC9Ac2l6ZS54LCAxODAqeS9Ac2l6ZS55XG4gICAgICBcbiAgICBhbmltYXRlOiAoZnVuYykgLT5cbiAgICAgICAgXG4gICAgICAgIEBhbmltYXRpb25zLnB1c2ggZnVuY1xuICAgICAgICBcbiAgICBhbmltYXRpb25TdGVwOiA9PlxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIG5vdyA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxuICAgICAgICBkZWx0YSA9IChub3cgLSBAbGFzdEFuaW1hdGlvblRpbWUpICogMC4wMDFcbiAgICAgICAgXG4gICAgICAgIEBsYXN0QW5pbWF0aW9uVGltZSA9IG5vd1xuICAgICAgICBcbiAgICAgICAgb2xkQW5pbWF0aW9ucyA9IEBhbmltYXRpb25zLmNsb25lKClcbiAgICAgICAgQGFuaW1hdGlvbnMgPSBbXVxuICAgICAgICBmb3IgYW5pbWF0aW9uIGluIG9sZEFuaW1hdGlvbnNcbiAgICAgICAgICAgIGFuaW1hdGlvbiBkZWx0YVxuICAgICAgICBcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIEBhbmltYXRpb25TdGVwXG4gICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAgICAwMDAgMDAwICAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAgICAwICAgICAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuICAgIFxuICAgIHNldFBpdm90OiAocCkgLT5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQHJvdGF0ZSArPSAtcC54XG4gICAgICAgIEBkZWdyZWUgKz0gLXAueVxuICAgICAgICBcbiAgICAgICAgQHVwZGF0ZSgpXG4gICAgICAgICAgIFxuICAgIHN0YXJ0UGl2b3RMZWZ0OiAtPlxuICAgICAgICBcbiAgICAgICAgQHBpdm90LnggPSAtMVxuICAgICAgICBAc3RhcnRQaXZvdCgpXG4gICAgICAgIFxuICAgIHN0YXJ0UGl2b3RSaWdodDogLT5cbiAgICAgICAgXG4gICAgICAgIEBwaXZvdC54ID0gMVxuICAgICAgICBAc3RhcnRQaXZvdCgpXG5cbiAgICBzdGFydFBpdm90VXA6IC0+XG4gICAgICAgIFxuICAgICAgICBAcGl2b3QueSA9IC0xXG4gICAgICAgIEBzdGFydFBpdm90KClcbiAgICAgICAgXG4gICAgc3RhcnRQaXZvdERvd246IC0+XG4gICAgICAgIFxuICAgICAgICBAcGl2b3QueSA9IDFcbiAgICAgICAgQHN0YXJ0UGl2b3QoKVxuICAgICAgICBcbiAgICBzdG9wUGl2b3Q6IC0+XG4gICAgICAgIFxuICAgICAgICBAcGl2b3RpbmcgPSBmYWxzZVxuICAgICAgICBAcGl2b3Quc2V0IDAgMFxuICAgICAgIFxuICAgIHN0YXJ0UGl2b3Q6IC0+IFxuICAgICAgICBcbiAgICAgICAgaWYgbm90IEBwaXZvdGluZ1xuICAgICAgICAgICAgQGFuaW1hdGUgQHBpdm90Q2VudGVyXG4gICAgICAgICAgICBAcGl2b3RpbmcgPSB0cnVlXG4gICAgICAgICAgICBcbiAgICBwaXZvdENlbnRlcjogKGRlbHRhU2Vjb25kcykgPT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQHBpdm90aW5nXG5cbiAgICAgICAgQHNldFBpdm90IEBwaXZvdFxuICAgICAgICBcbiAgICAgICAgQHBpdm90Lm11bHRpcGx5U2NhbGFyIDAuOTZcbiAgICAgICAgXG4gICAgICAgIGlmIEBwaXZvdC5sZW5ndGgoKSA+IDAuMDAxXG4gICAgICAgICAgICBAYW5pbWF0ZSBAcGl2b3RDZW50ZXJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHN0b3BQaXZvdCgpXG4gICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMCAgMDAwICBcbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgXG4gICAgIyAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICBcbiAgICBwYW46ICh4LHkpIC0+XG4gICAgICAgIFxuICAgICAgICByaWdodCA9IG5ldyBUSFJFRS5WZWN0b3IzIC14LCAwLCAwIFxuICAgICAgICByaWdodC5hcHBseVF1YXRlcm5pb24gQHF1YXRlcm5pb25cblxuICAgICAgICB1cCA9IG5ldyBUSFJFRS5WZWN0b3IzIDAsIHksIDAgXG4gICAgICAgIHVwLmFwcGx5UXVhdGVybmlvbiBAcXVhdGVybmlvblxuICAgICAgICBcbiAgICAgICAgQGNlbnRlci5hZGQgcmlnaHQuYWRkIHVwXG4gICAgICAgIEBjZW50ZXJUYXJnZXQ/LmNvcHkgQGNlbnRlclxuICAgICAgICBAdXBkYXRlKClcbiAgICAgICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgIFxuICAgICMgMDAwICAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuICAgICAgICAgICAgICAgICAgICAgXG4gICAgZm9jdXNPblBvczogKHYpIC0+XG4gICAgICAgIFxuICAgICAgICBAY2VudGVyVGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMgdlxuICAgICAgICBAY2VudGVyID0gbmV3IFRIUkVFLlZlY3RvcjMgdlxuICAgICAgICBAdXBkYXRlKClcbiAgICAgICAgIFxuICAgIGZhZGVUb1BvczogKHYpIC0+IFxuICAgICAgICBcbiAgICAgICAgQGNlbnRlclRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzIHZcbiAgICAgICAgQHN0YXJ0RmFkZUNlbnRlcigpXG5cbiAgICBzdGFydEZhZGVDZW50ZXI6IC0+IFxuICAgICAgICBcbiAgICAgICAgaWYgbm90IEBmYWRpbmdcbiAgICAgICAgICAgIEBhbmltYXRlIEBmYWRlQ2VudGVyXG4gICAgICAgICAgICBAZmFkaW5nID0gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgZmFkZUNlbnRlcjogKGRlbHRhU2Vjb25kcykgPT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQGZhZGluZ1xuICAgICAgICBcbiAgICAgICAgQGNlbnRlci5mYWRlIEBjZW50ZXJUYXJnZXQsIGRlbHRhU2Vjb25kc1xuICAgICAgICBAdXBkYXRlKClcbiAgICAgICAgXG4gICAgICAgIGlmIEBjZW50ZXIuZGlzdChAY2VudGVyVGFyZ2V0KSA+IDAuMDAwMDFcbiAgICAgICAgICAgIEBhbmltYXRlIEBmYWRlQ2VudGVyXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBAZmFkaW5nXG5cbiAgICAjIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwIDAwMCAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAwIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgICAgMCAgICAgIDAwMDAwMDAwICBcbiAgICBcbiAgICBtb3ZlRmFjdG9yOiAtPiBAZGlzdC8yXG4gICAgXG4gICAgc3RhcnRNb3ZlTGVmdDogLT5cbiAgICAgICAgXG4gICAgICAgIEBtb3ZlLnggPSAtQG1vdmVGYWN0b3IoKVxuICAgICAgICBAc3RhcnRNb3ZlKClcbiAgICAgICAgXG4gICAgc3RhcnRNb3ZlUmlnaHQ6IC0+XG4gICAgICAgIFxuICAgICAgICBAbW92ZS54ID0gQG1vdmVGYWN0b3IoKVxuICAgICAgICBAc3RhcnRNb3ZlKClcblxuICAgIHN0YXJ0TW92ZVVwOiAtPlxuICAgICAgICBcbiAgICAgICAgQG1vdmUueSA9IEBtb3ZlRmFjdG9yKClcbiAgICAgICAgQHN0YXJ0TW92ZSgpXG4gICAgICAgIFxuICAgIHN0YXJ0TW92ZURvd246IC0+XG4gICAgICAgIFxuICAgICAgICBAbW92ZS55ID0gLUBtb3ZlRmFjdG9yKClcbiAgICAgICAgQHN0YXJ0TW92ZSgpXG5cbiAgICBzdGFydE1vdmVGb3J3YXJkOiAtPlxuICAgICAgICBcbiAgICAgICAgQG1vdmUueiA9IC1AbW92ZUZhY3RvcigpXG4gICAgICAgIEBzdGFydE1vdmUoKVxuICAgICAgICBcbiAgICBzdGFydE1vdmVCYWNrd2FyZDogLT5cbiAgICAgICAgXG4gICAgICAgIEBtb3ZlLnogPSAgQG1vdmVGYWN0b3IoKVxuICAgICAgICBAc3RhcnRNb3ZlKClcbiAgICAgICAgXG4gICAgc3RvcE1vdmluZzogLT5cbiAgICAgICAgXG4gICAgICAgIEBtb3ZpbmcgPSBmYWxzZVxuICAgICAgICBAbW92ZS5zZXQgMCAwIDBcbiAgICAgICBcbiAgICBzdGFydE1vdmU6IC0+IFxuICAgICAgICBcbiAgICAgICAgQGZhZGluZyA9IGZhbHNlXG4gICAgICAgIGlmIG5vdCBAbW92aW5nXG4gICAgICAgICAgICBAYW5pbWF0ZSBAbW92ZUNlbnRlclxuICAgICAgICAgICAgQG1vdmluZyA9IHRydWVcbiAgICAgICAgICAgIFxuICAgIG1vdmVDZW50ZXI6IChkZWx0YVNlY29uZHMpID0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgbm90IEBtb3ZpbmdcbiAgICAgICAgXG4gICAgICAgIGRpciA9IG5ldyBUSFJFRS5WZWN0b3IzXG4gICAgICAgIGRpci5hZGQgQG1vdmVcblxuICAgICAgICBkaXIubXVsdGlwbHlTY2FsYXIgZGVsdGFTZWNvbmRzXG4gICAgICAgIGRpci5hcHBseVF1YXRlcm5pb24gQHF1YXRlcm5pb25cbiAgICAgICAgXG4gICAgICAgIEBjZW50ZXIuYWRkIGRpclxuICAgICAgICBAdXBkYXRlKClcbiAgICAgICAgXG4gICAgICAgIEBtb3ZlLm11bHRpcGx5U2NhbGFyIDAuOTZcbiAgICAgICAgaWYgQG1vdmUubGVuZ3RoKCkgPiAwLjAwMVxuICAgICAgICAgICAgQGFuaW1hdGUgQG1vdmVDZW50ZXJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHN0b3BNb3ZpbmcoKVxuICAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgICAgIFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgICAgIFxuICAgICMgMDAgICAgIDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgXG4gICAgXG4gICAgb25Nb3VzZVdoZWVsOiAoZXZlbnQpID0+IFxuICAgIFxuICAgICAgICBpZiBAd2hlZWxJbmVydCA+IDAgYW5kIGV2ZW50LndoZWVsRGVsdGEgPCAwXG4gICAgICAgICAgICBAd2hlZWxJbmVydCA9IDBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIGlmIEB3aGVlbEluZXJ0IDwgMCBhbmQgZXZlbnQud2hlZWxEZWx0YSA+IDBcbiAgICAgICAgICAgIEB3aGVlbEluZXJ0ID0gMFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgQHdoZWVsSW5lcnQgKz0gZXZlbnQud2hlZWxEZWx0YSAqICgxKyhAZGlzdC9AbWF4RGlzdCkqMykgKiAwLjAwMDFcbiAgICAgICAgXG4gICAgICAgIEBzdGFydFpvb20oKVxuXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAgICAgIDAwICBcbiAgICAjICAgIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgICAwMDAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgXG4gICAgIyAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuXG4gICAgc3RhcnRab29tSW46IC0+XG4gICAgICAgIFxuICAgICAgICBAd2hlZWxJbmVydCA9ICgxKyhAZGlzdC9AbWF4RGlzdCkqMykqMTBcbiAgICAgICAgQHN0YXJ0Wm9vbSgpXG4gICAgICAgIFxuICAgIHN0YXJ0Wm9vbU91dDogLT5cbiAgICAgICAgXG4gICAgICAgIEB3aGVlbEluZXJ0ID0gLSgxKyhAZGlzdC9AbWF4RGlzdCkqMykqMTBcbiAgICAgICAgQHN0YXJ0Wm9vbSgpXG4gICAgXG4gICAgc3RhcnRab29tOiAtPiBcbiAgICAgICAgXG4gICAgICAgIGlmIG5vdCBAem9vbWluZ1xuICAgICAgICAgICAgQGFuaW1hdGUgQGluZXJ0Wm9vbVxuICAgICAgICAgICAgQHpvb21pbmcgPSB0cnVlXG4gICAgICAgICAgICBcbiAgICBzdG9wWm9vbTogLT4gXG4gICAgICAgIFxuICAgICAgICBAd2hlZWxJbmVydCA9IDBcbiAgICAgICAgQHpvb21pbmcgPSBmYWxzZVxuICAgIFxuICAgIGluZXJ0Wm9vbTogKGRlbHRhU2Vjb25kcykgPT5cblxuICAgICAgICBAc2V0RGlzdEZhY3RvciAxIC0gY2xhbXAgLTAuMDIsIDAuMDIsIEB3aGVlbEluZXJ0XG4gICAgICAgIEB3aGVlbEluZXJ0ID0gcmVkdWNlIEB3aGVlbEluZXJ0LCBkZWx0YVNlY29uZHMqMC4zXG4gICAgICAgIFxuICAgICAgICBpZiBNYXRoLmFicyhAd2hlZWxJbmVydCkgPiAwLjAwMDAwMDAxXG4gICAgICAgICAgICBAYW5pbWF0ZSBAaW5lcnRab29tXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBAem9vbWluZ1xuICAgICAgICAgICAgQHdoZWVsSW5lcnQgPSAwXG4gICAgXG4gICAgc2V0RGlzdEZhY3RvcjogKGZhY3RvcikgPT5cbiAgICAgICAgXG4gICAgICAgIEBkaXN0ID0gY2xhbXAgQG1pbkRpc3QsIEBtYXhEaXN0LCBAZGlzdCpmYWN0b3JcbiAgICAgICAgQHVwZGF0ZSgpXG4gICAgICAgIFxuICAgIHNldEZvdjogKGZvdikgLT4gQGZvdiA9IE1hdGgubWF4KDIuMCwgTWF0aC5taW4gZm92LCAxNzUuMClcbiAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMCAgICAgICAgMDAwMDAwMCAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDAgIFxuICAgIFxuICAgIHVwZGF0ZTogLT4gXG4gICAgICAgIFxuICAgICAgICBAZGVncmVlID0gY2xhbXAgLTkwIDkwIEBkZWdyZWVcbiAgICAgICAgXG4gICAgICAgIEBxdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUgbmV3IFRIUkVFLlZlY3RvcjMoMCAxIDApLCBkZWcycmFkIEByb3RhdGVcblxuICAgICAgICBwaXRjaFJvdCA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uXG4gICAgICAgIHBpdGNoUm90LnNldEZyb21BeGlzQW5nbGUgbmV3IFRIUkVFLlZlY3RvcjMoMSAwIDApLCBkZWcycmFkIEBkZWdyZWVcbiAgICAgICAgXG4gICAgICAgIEBxdWF0ZXJuaW9uLm11bHRpcGx5IHBpdGNoUm90XG4gICAgICAgIFxuICAgICAgICBAcG9zaXRpb24uY29weSBAY2VudGVyXG4gICAgICAgIEBwb3NpdGlvbi5hZGQgbmV3IFRIUkVFLlZlY3RvcjMoMCAwIEBkaXN0KS5hcHBseVF1YXRlcm5pb24gQHF1YXRlcm5pb25cbiAgICAgICAgXG4gICAgICAgICMgbG9nIFwiY2FtZXJhOlwiLCBAZGlzdCwgQHJvdGF0ZSwgQGRlZ3JlZVxuXG5tb2R1bGUuZXhwb3J0cyA9IENhbWVyYVxuIl19
//# sourceURL=../coffee/camera.coffee