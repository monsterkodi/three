// koffee 1.12.0

/*
 0000000   0000000   00     00  00000000  00000000    0000000 
000       000   000  000   000  000       000   000  000   000
000       000000000  000000000  0000000   0000000    000000000
000       000   000  000 0 000  000       000   000  000   000
 0000000  000   000  000   000  00000000  000   000  000   000
 */
var Camera, PerspectiveCamera, Quaternion, Vector2, Vector3, abs, clamp, deg2rad, kpos, max, min, prefs, reduce, ref, ref1,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), clamp = ref.clamp, deg2rad = ref.deg2rad, kpos = ref.kpos, prefs = ref.prefs, reduce = ref.reduce;

ref1 = require('three'), Camera = ref1.Camera, PerspectiveCamera = ref1.PerspectiveCamera, Quaternion = ref1.Quaternion, Vector2 = ref1.Vector2, Vector3 = ref1.Vector3;

abs = Math.abs, max = Math.max, min = Math.min;

Camera = (function(superClass) {
    extend(Camera, superClass);

    function Camera(arg) {
        var height, ref2, view, width;
        view = (ref2 = arg.view) != null ? ref2 : null;
        this.setDistFactor = bind(this.setDistFactor, this);
        this.inertZoom = bind(this.inertZoom, this);
        this.onMouseWheel = bind(this.onMouseWheel, this);
        this.moveCenter = bind(this.moveCenter, this);
        this.fadeCenter = bind(this.fadeCenter, this);
        this.pivotCenter = bind(this.pivotCenter, this);
        this.animationStep = bind(this.animationStep, this);
        this.onMouseDrag = bind(this.onMouseDrag, this);
        this.onDblClick = bind(this.onDblClick, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.del = bind(this.del, this);
        this.elem = view;
        width = this.elem.clientWidth;
        height = this.elem.clientHeight;
        Camera.__super__.constructor.call(this, 70, width / height, 0.01, 300);
        this.center = new Vector3(0, 0, 0);
        this.size = new Vector2(width, height);
        this.pivot = new Vector2;
        this.move = new Vector3;
        this.maxDist = this.far / 4;
        this.minDist = 0.9;
        this.dist = prefs.get('camera▸dist', 10);
        this.degree = prefs.get('camera▸degree', 0);
        this.rotate = prefs.get('camera▸rotate', 0);
        this.wheelInert = 0;
        this.animations = [];
        this.elem.addEventListener('mousewheel', this.onMouseWheel);
        this.elem.addEventListener('mousedown', this.onMouseDown);
        this.elem.addEventListener('keypress', this.onKeyPress);
        this.elem.addEventListener('keyrelease', this.onKeyRelease);
        this.elem.addEventListener('dblclick', this.onDblClick);
        this.update();
        requestAnimationFrame(this.animationStep);
    }

    Camera.prototype.getPosition = function() {
        return this.position;
    };

    Camera.prototype.getDir = function() {
        return new Vector3(0, 0, -1).applyQuaternion(this.quaternion);
    };

    Camera.prototype.getUp = function() {
        return new Vector3(0, 1, 0).applyQuaternion(this.quaternion);
    };

    Camera.prototype.getRight = function() {
        return new Vector3(1, 0, 0).applyQuaternion(this.quaternion);
    };

    Camera.prototype.del = function() {
        this.elem.removeEventListener('keypress', this.onKeyPress);
        this.elem.removeEventListener('keyrelease', this.onKeyRelease);
        this.elem.removeEventListener('mousewheel', this.onMouseWheel);
        this.elem.removeEventListener('mousedown', this.onMouseDown);
        this.elem.removeEventListener('dblclick', this.onDblClick);
        window.removeEventListener('mouseup', this.onMouseUp);
        return window.removeEventListener('mousemove', this.onMouseDrag);
    };

    Camera.prototype.onMouseDown = function(event) {
        this.downButtons = event.buttons;
        this.mouseMoved = false;
        this.mouseX = event.clientX;
        this.mouseY = event.clientY;
        this.downPos = kpos(this.mouseX, this.mouseY);
        window.addEventListener('mousemove', this.onMouseDrag);
        return window.addEventListener('mouseup', this.onMouseUp);
    };

    Camera.prototype.onMouseUp = function(event) {
        window.removeEventListener('mousemove', this.onMouseDrag);
        return window.removeEventListener('mouseup', this.onMouseUp);
    };

    Camera.prototype.onDblClick = function(event) {};

    Camera.prototype.onMouseDrag = function(event) {
        var s, x, y;
        x = event.clientX - this.mouseX;
        y = event.clientY - this.mouseY;
        this.mouseX = event.clientX;
        this.mouseY = event.clientY;
        if (this.downPos.dist(kpos(this.mouseX, this.mouseY)) > 60) {
            this.mouseMoved = true;
        }
        if (event.buttons & 4) {
            s = this.dist;
            this.pan(x * 2 * s / this.size.x, y * s / this.size.y);
        }
        if (event.buttons & 2) {
            return this.setPivot(new Vector2(360 * x / this.size.x, 180 * y / this.size.y));
        }
    };

    Camera.prototype.animate = function(func) {
        return this.animations.push(func);
    };

    Camera.prototype.animationStep = function() {
        var animation, delta, i, len, now, oldAnimations;
        now = window.performance.now();
        delta = (now - this.lastAnimationTime) * 0.001;
        this.lastAnimationTime = now;
        oldAnimations = this.animations.clone();
        this.animations = [];
        for (i = 0, len = oldAnimations.length; i < len; i++) {
            animation = oldAnimations[i];
            animation(delta);
        }
        return requestAnimationFrame(this.animationStep);
    };

    Camera.prototype.setPivot = function(p) {
        this.rotate += -p.x;
        this.degree += -p.y;
        return this.update();
    };

    Camera.prototype.startPivotLeft = function() {
        this.pivot.x = -1;
        return this.startPivot();
    };

    Camera.prototype.startPivotRight = function() {
        this.pivot.x = 1;
        return this.startPivot();
    };

    Camera.prototype.startPivotUp = function() {
        this.pivot.y = -1;
        return this.startPivot();
    };

    Camera.prototype.startPivotDown = function() {
        this.pivot.y = 1;
        return this.startPivot();
    };

    Camera.prototype.stopPivot = function() {
        this.pivoting = false;
        return this.pivot.set(0, 0);
    };

    Camera.prototype.startPivot = function() {
        if (!this.pivoting) {
            this.animate(this.pivotCenter);
            return this.pivoting = true;
        }
    };

    Camera.prototype.pivotCenter = function(deltaSeconds) {
        if (!this.pivoting) {
            return;
        }
        this.setPivot(this.pivot);
        this.pivot.multiplyScalar(0.96);
        if (this.pivot.length() > 0.001) {
            return this.animate(this.pivotCenter);
        } else {
            return this.stopPivot();
        }
    };

    Camera.prototype.pan = function(x, y) {
        var ref2, right, up;
        right = new Vector3(-x, 0, 0);
        right.applyQuaternion(this.quaternion);
        up = new Vector3(0, y, 0);
        up.applyQuaternion(this.quaternion);
        this.center.add(right.add(up));
        if ((ref2 = this.centerTarget) != null) {
            ref2.copy(this.center);
        }
        return this.update();
    };

    Camera.prototype.focusOnPos = function(v) {
        this.centerTarget = new Vector3(v);
        this.center = new Vector3(v);
        return this.update();
    };

    Camera.prototype.fadeToPos = function(v) {
        this.centerTarget = v.clone();
        return this.startFadeCenter();
    };

    Camera.prototype.startFadeCenter = function() {
        if (!this.fading) {
            this.animate(this.fadeCenter);
            return this.fading = true;
        }
    };

    Camera.prototype.fadeCenter = function(deltaSeconds) {
        if (!this.fading) {
            return;
        }
        this.center.lerp(this.centerTarget, deltaSeconds);
        this.update();
        if (this.center.distanceTo(this.centerTarget) > 0.001) {
            return this.animate(this.fadeCenter);
        } else {
            return delete this.fading;
        }
    };

    Camera.prototype.moveFactor = function() {
        return this.dist / 2;
    };

    Camera.prototype.startMoveLeft = function() {
        this.move.x = -this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveRight = function() {
        this.move.x = this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveUp = function() {
        this.move.y = this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveDown = function() {
        this.move.y = -this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveForward = function() {
        this.move.z = -this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveBackward = function() {
        this.move.z = this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.stopMoving = function() {
        this.moving = false;
        return this.move.set(0, 0, 0);
    };

    Camera.prototype.startMove = function() {
        this.fading = false;
        if (!this.moving) {
            this.animate(this.moveCenter);
            return this.moving = true;
        }
    };

    Camera.prototype.moveCenter = function(deltaSeconds) {
        var dir;
        if (!this.moving) {
            return;
        }
        dir = new Vector3;
        dir.add(this.move);
        dir.multiplyScalar(deltaSeconds);
        dir.applyQuaternion(this.quaternion);
        this.center.add(dir);
        this.update();
        this.move.multiplyScalar(0.96);
        if (this.move.length() > 0.001) {
            return this.animate(this.moveCenter);
        } else {
            return this.stopMoving();
        }
    };

    Camera.prototype.onMouseWheel = function(event) {
        if (this.wheelInert > 0 && event.wheelDelta < 0) {
            this.wheelInert = 0;
            return;
        }
        if (this.wheelInert < 0 && event.wheelDelta > 0) {
            this.wheelInert = 0;
            return;
        }
        this.wheelInert += event.wheelDelta * (1 + (this.dist / this.maxDist) * 3) * 0.0001;
        return this.startZoom();
    };

    Camera.prototype.startZoomIn = function() {
        this.wheelInert = (1 + (this.dist / this.maxDist) * 3) * 10;
        return this.startZoom();
    };

    Camera.prototype.startZoomOut = function() {
        this.wheelInert = -(1 + (this.dist / this.maxDist) * 3) * 10;
        return this.startZoom();
    };

    Camera.prototype.startZoom = function() {
        if (!this.zooming) {
            this.animate(this.inertZoom);
            return this.zooming = true;
        }
    };

    Camera.prototype.stopZoom = function() {
        this.wheelInert = 0;
        return this.zooming = false;
    };

    Camera.prototype.inertZoom = function(deltaSeconds) {
        this.setDistFactor(1 - clamp(-0.02, 0.02, this.wheelInert));
        this.wheelInert = reduce(this.wheelInert, deltaSeconds * 0.3);
        if (abs(this.wheelInert) > 0.00001) {
            return this.animate(this.inertZoom);
        } else {
            delete this.zooming;
            return this.wheelInert = 0;
        }
    };

    Camera.prototype.setDistFactor = function(factor) {
        this.dist = clamp(this.minDist, this.maxDist, this.dist * factor);
        return this.update();
    };

    Camera.prototype.setFov = function(fov) {
        return this.fov = max(2.0, min(fov, 175.0));
    };

    Camera.prototype.update = function() {
        var pitchRot;
        this.degree = clamp(-90, 90, this.degree);
        this.quaternion.setFromAxisAngle(new Vector3(0, 1, 0), deg2rad(this.rotate));
        pitchRot = new Quaternion;
        pitchRot.setFromAxisAngle(new Vector3(1, 0, 0), deg2rad(this.degree));
        this.quaternion.multiply(pitchRot);
        this.position.copy(this.center);
        this.position.add(new Vector3(0, 0, this.dist).applyQuaternion(this.quaternion));
        prefs.set('camera▸dist', this.dist);
        prefs.set('camera▸degree', this.degree);
        return prefs.set('camera▸rotate', this.rotate);
    };

    return Camera;

})(PerspectiveCamera);

module.exports = Camera;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FtZXJhLmpzIiwic291cmNlUm9vdCI6Ii4uL2NvZmZlZSIsInNvdXJjZXMiOlsiY2FtZXJhLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSxzSEFBQTtJQUFBOzs7O0FBUUEsTUFBMEMsT0FBQSxDQUFRLEtBQVIsQ0FBMUMsRUFBRSxpQkFBRixFQUFTLHFCQUFULEVBQWtCLGVBQWxCLEVBQXdCLGlCQUF4QixFQUErQjs7QUFDL0IsT0FBOEQsT0FBQSxDQUFRLE9BQVIsQ0FBOUQsRUFBRSxvQkFBRixFQUFVLDBDQUFWLEVBQTZCLDRCQUE3QixFQUF5QyxzQkFBekMsRUFBa0Q7O0FBQ2hELGNBQUYsRUFBTyxjQUFQLEVBQVk7O0FBRU47OztJQUVDLGdCQUFDLEdBQUQ7QUFFQyxZQUFBO1FBRkEsMENBQUc7Ozs7Ozs7Ozs7Ozs7UUFFSCxJQUFDLENBQUEsSUFBRCxHQUFRO1FBQ1IsS0FBQSxHQUFTLElBQUMsQ0FBQSxJQUFJLENBQUM7UUFDZixNQUFBLEdBQVMsSUFBQyxDQUFBLElBQUksQ0FBQztRQUlmLHdDQUFNLEVBQU4sRUFBVSxLQUFBLEdBQU0sTUFBaEIsRUFBd0IsSUFBeEIsRUFBOEIsR0FBOUI7UUFFQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUksT0FBSixDQUFZLENBQVosRUFBYyxDQUFkLEVBQWdCLENBQWhCO1FBQ2QsSUFBQyxDQUFBLElBQUQsR0FBYyxJQUFJLE9BQUosQ0FBWSxLQUFaLEVBQW1CLE1BQW5CO1FBQ2QsSUFBQyxDQUFBLEtBQUQsR0FBYyxJQUFJO1FBQ2xCLElBQUMsQ0FBQSxJQUFELEdBQWMsSUFBSTtRQUNsQixJQUFDLENBQUEsT0FBRCxHQUFjLElBQUMsQ0FBQSxHQUFELEdBQUs7UUFDbkIsSUFBQyxDQUFBLE9BQUQsR0FBYztRQUNkLElBQUMsQ0FBQSxJQUFELEdBQWMsS0FBSyxDQUFDLEdBQU4sQ0FBVSxhQUFWLEVBQXlCLEVBQXpCO1FBQ2QsSUFBQyxDQUFBLE1BQUQsR0FB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MCAgIDAwICAgICAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgXG4wMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuMDAwICAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwMDBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuIyMjXG5cbnsgY2xhbXAsIGRlZzJyYWQsIGtwb3MsIHByZWZzLCByZWR1Y2UgfSA9IHJlcXVpcmUgJ2t4aydcbnsgQ2FtZXJhLCBQZXJzcGVjdGl2ZUNhbWVyYSwgUXVhdGVybmlvbiwgVmVjdG9yMiwgVmVjdG9yMyB9ID0gcmVxdWlyZSAndGhyZWUnXG57IGFicywgbWF4LCBtaW4gfSA9IE1hdGhcblxuY2xhc3MgQ2FtZXJhIGV4dGVuZHMgUGVyc3BlY3RpdmVDYW1lcmFcblxuICAgIEA6ICh2aWV3OikgLT5cbiAgICAgICAgXG4gICAgICAgIEBlbGVtID0gdmlld1xuICAgICAgICB3aWR0aCAgPSBAZWxlbS5jbGllbnRXaWR0aFxuICAgICAgICBoZWlnaHQgPSBAZWxlbS5jbGllbnRIZWlnaHRcbiAgICAgICAgXG4gICAgICAgICMga2xvZyBcIndpZHRoICN7d2lkdGh9IGhlaWdodCAje2hlaWdodH1cIlxuICAgICAgICBcbiAgICAgICAgc3VwZXIgNzAsIHdpZHRoL2hlaWdodCwgMC4wMSwgMzAwICMgZm92LCBhc3BlY3QsIG5lYXIsIGZhclxuICAgICAgICBcbiAgICAgICAgQGNlbnRlciAgICAgPSBuZXcgVmVjdG9yMyAwIDAgMFxuICAgICAgICBAc2l6ZSAgICAgICA9IG5ldyBWZWN0b3IyIHdpZHRoLCBoZWlnaHQgXG4gICAgICAgIEBwaXZvdCAgICAgID0gbmV3IFZlY3RvcjJcbiAgICAgICAgQG1vdmUgICAgICAgPSBuZXcgVmVjdG9yM1xuICAgICAgICBAbWF4RGlzdCAgICA9IEBmYXIvNFxuICAgICAgICBAbWluRGlzdCAgICA9IDAuOVxuICAgICAgICBAZGlzdCAgICAgICA9IHByZWZzLmdldCAnY2FtZXJh4pa4ZGlzdCcgIDEwXG4gICAgICAgIEBkZWdyZWUgICAgID0gcHJlZnMuZ2V0ICdjYW1lcmHilrhkZWdyZWUnIDBcbiAgICAgICAgQHJvdGF0ZSAgICAgPSBwcmVmcy5nZXQgJ2NhbWVyYeKWuHJvdGF0ZScgMFxuICAgICAgICBAd2hlZWxJbmVydCA9IDBcbiAgICAgICAgQGFuaW1hdGlvbnMgPSBbXVxuXG4gICAgICAgIEBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNld2hlZWwnIEBvbk1vdXNlV2hlZWxcbiAgICAgICAgQGVsZW0uYWRkRXZlbnRMaXN0ZW5lciAnbW91c2Vkb3duJyAgQG9uTW91c2VEb3duXG4gICAgICAgIEBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgJ2tleXByZXNzJyAgIEBvbktleVByZXNzXG4gICAgICAgIEBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgJ2tleXJlbGVhc2UnIEBvbktleVJlbGVhc2VcbiAgICAgICAgQGVsZW0uYWRkRXZlbnRMaXN0ZW5lciAnZGJsY2xpY2snICAgQG9uRGJsQ2xpY2tcbiAgICAgICAgXG4gICAgICAgIEB1cGRhdGUoKVxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQGFuaW1hdGlvblN0ZXBcblxuICAgIGdldFBvc2l0aW9uOiAtPiBAcG9zaXRpb25cbiAgICBnZXREaXI6ICAgICAgLT4gbmV3IFZlY3RvcjMoMCAwIC0xKS5hcHBseVF1YXRlcm5pb24gQHF1YXRlcm5pb24gXG4gICAgZ2V0VXA6ICAgICAgIC0+IG5ldyBWZWN0b3IzKDAgMSAgMCkuYXBwbHlRdWF0ZXJuaW9uIEBxdWF0ZXJuaW9uICBcbiAgICBnZXRSaWdodDogICAgLT4gbmV3IFZlY3RvcjMoMSAwICAwKS5hcHBseVF1YXRlcm5pb24gQHF1YXRlcm5pb24gIFxuXG4gICAgZGVsOiA9PlxuICAgICAgICBcbiAgICAgICAgQGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciAgJ2tleXByZXNzJyAgIEBvbktleVByZXNzXG4gICAgICAgIEBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgICdrZXlyZWxlYXNlJyBAb25LZXlSZWxlYXNlXG4gICAgICAgIEBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgICdtb3VzZXdoZWVsJyBAb25Nb3VzZVdoZWVsXG4gICAgICAgIEBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgICdtb3VzZWRvd24nICBAb25Nb3VzZURvd25cbiAgICAgICAgQGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciAgJ2RibGNsaWNrJyAgIEBvbkRibENsaWNrXG4gICAgICAgIFxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciAnbW91c2V1cCcgICAgQG9uTW91c2VVcFxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciAnbW91c2Vtb3ZlJyAgQG9uTW91c2VEcmFnIFxuICAgICAgICBcbiAgICAjIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIFxuICAgIFxuICAgIG9uTW91c2VEb3duOiAoZXZlbnQpID0+IFxuICAgICAgICBcbiAgICAgICAgQGRvd25CdXR0b25zID0gZXZlbnQuYnV0dG9uc1xuICAgICAgICBAbW91c2VNb3ZlZCAgPSBmYWxzZVxuICAgICAgICAgICAgXG4gICAgICAgIEBtb3VzZVggPSBldmVudC5jbGllbnRYXG4gICAgICAgIEBtb3VzZVkgPSBldmVudC5jbGllbnRZXG4gICAgICAgIFxuICAgICAgICBAZG93blBvcyA9IGtwb3MgQG1vdXNlWCwgQG1vdXNlWVxuICAgICAgICBcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNlbW92ZScgQG9uTW91c2VEcmFnXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICdtb3VzZXVwJyAgIEBvbk1vdXNlVXBcbiAgICAgICAgXG4gICAgb25Nb3VzZVVwOiAoZXZlbnQpID0+IFxuXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyICdtb3VzZW1vdmUnIEBvbk1vdXNlRHJhZ1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciAnbW91c2V1cCcgICBAb25Nb3VzZVVwXG4gICAgICAgIFxuICAgIG9uRGJsQ2xpY2s6IChldmVudCkgPT5cbiAgICAgICAgXG4gICAgb25Nb3VzZURyYWc6IChldmVudCkgPT5cblxuICAgICAgICB4ID0gZXZlbnQuY2xpZW50WC1AbW91c2VYXG4gICAgICAgIHkgPSBldmVudC5jbGllbnRZLUBtb3VzZVlcbiAgICAgICAgXG4gICAgICAgIEBtb3VzZVggPSBldmVudC5jbGllbnRYXG4gICAgICAgIEBtb3VzZVkgPSBldmVudC5jbGllbnRZXG4gICAgICAgIFxuICAgICAgICBpZiBAZG93blBvcy5kaXN0KGtwb3MgQG1vdXNlWCwgQG1vdXNlWSkgPiA2MFxuICAgICAgICAgICAgQG1vdXNlTW92ZWQgPSB0cnVlXG4gICAgICAgIFxuICAgICAgICBpZiBldmVudC5idXR0b25zICYgNFxuICAgICAgICAgICAgcyA9IEBkaXN0XG4gICAgICAgICAgICBAcGFuIHgqMipzL0BzaXplLngsIHkqcy9Ac2l6ZS55XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgZXZlbnQuYnV0dG9ucyAmIDJcbiAgICAgICAgICAgIEBzZXRQaXZvdCBuZXcgVmVjdG9yMiAzNjAqeC9Ac2l6ZS54LCAxODAqeS9Ac2l6ZS55XG4gICAgICBcbiAgICBhbmltYXRlOiAoZnVuYykgLT5cbiAgICAgICAgXG4gICAgICAgIEBhbmltYXRpb25zLnB1c2ggZnVuY1xuICAgICAgICBcbiAgICBhbmltYXRpb25TdGVwOiA9PlxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIG5vdyA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxuICAgICAgICBkZWx0YSA9IChub3cgLSBAbGFzdEFuaW1hdGlvblRpbWUpICogMC4wMDFcbiAgICAgICAgXG4gICAgICAgIEBsYXN0QW5pbWF0aW9uVGltZSA9IG5vd1xuICAgICAgICBcbiAgICAgICAgb2xkQW5pbWF0aW9ucyA9IEBhbmltYXRpb25zLmNsb25lKClcbiAgICAgICAgQGFuaW1hdGlvbnMgPSBbXVxuICAgICAgICBmb3IgYW5pbWF0aW9uIGluIG9sZEFuaW1hdGlvbnNcbiAgICAgICAgICAgIGFuaW1hdGlvbiBkZWx0YVxuICAgICAgICBcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIEBhbmltYXRpb25TdGVwXG4gICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAgICAwMDAgMDAwICAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAgICAwICAgICAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuICAgIFxuICAgIHNldFBpdm90OiAocCkgLT5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQHJvdGF0ZSArPSAtcC54XG4gICAgICAgIEBkZWdyZWUgKz0gLXAueVxuICAgICAgICBcbiAgICAgICAgQHVwZGF0ZSgpXG4gICAgICAgICAgIFxuICAgIHN0YXJ0UGl2b3RMZWZ0OiAtPlxuICAgICAgICBcbiAgICAgICAgQHBpdm90LnggPSAtMVxuICAgICAgICBAc3RhcnRQaXZvdCgpXG4gICAgICAgIFxuICAgIHN0YXJ0UGl2b3RSaWdodDogLT5cbiAgICAgICAgXG4gICAgICAgIEBwaXZvdC54ID0gMVxuICAgICAgICBAc3RhcnRQaXZvdCgpXG5cbiAgICBzdGFydFBpdm90VXA6IC0+XG4gICAgICAgIFxuICAgICAgICBAcGl2b3QueSA9IC0xXG4gICAgICAgIEBzdGFydFBpdm90KClcbiAgICAgICAgXG4gICAgc3RhcnRQaXZvdERvd246IC0+XG4gICAgICAgIFxuICAgICAgICBAcGl2b3QueSA9IDFcbiAgICAgICAgQHN0YXJ0UGl2b3QoKVxuICAgICAgICBcbiAgICBzdG9wUGl2b3Q6IC0+XG4gICAgICAgIFxuICAgICAgICBAcGl2b3RpbmcgPSBmYWxzZVxuICAgICAgICBAcGl2b3Quc2V0IDAgMFxuICAgICAgIFxuICAgIHN0YXJ0UGl2b3Q6IC0+IFxuICAgICAgICBcbiAgICAgICAgaWYgbm90IEBwaXZvdGluZ1xuICAgICAgICAgICAgQGFuaW1hdGUgQHBpdm90Q2VudGVyXG4gICAgICAgICAgICBAcGl2b3RpbmcgPSB0cnVlXG4gICAgICAgICAgICBcbiAgICBwaXZvdENlbnRlcjogKGRlbHRhU2Vjb25kcykgPT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQHBpdm90aW5nXG5cbiAgICAgICAgQHNldFBpdm90IEBwaXZvdFxuICAgICAgICBcbiAgICAgICAgQHBpdm90Lm11bHRpcGx5U2NhbGFyIDAuOTZcbiAgICAgICAgXG4gICAgICAgIGlmIEBwaXZvdC5sZW5ndGgoKSA+IDAuMDAxXG4gICAgICAgICAgICBAYW5pbWF0ZSBAcGl2b3RDZW50ZXJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHN0b3BQaXZvdCgpXG4gICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMCAgMDAwICBcbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgXG4gICAgIyAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICBcbiAgICBwYW46ICh4LHkpIC0+XG4gICAgICAgIFxuICAgICAgICByaWdodCA9IG5ldyBWZWN0b3IzIC14LCAwLCAwIFxuICAgICAgICByaWdodC5hcHBseVF1YXRlcm5pb24gQHF1YXRlcm5pb25cblxuICAgICAgICB1cCA9IG5ldyBWZWN0b3IzIDAsIHksIDAgXG4gICAgICAgIHVwLmFwcGx5UXVhdGVybmlvbiBAcXVhdGVybmlvblxuICAgICAgICBcbiAgICAgICAgQGNlbnRlci5hZGQgcmlnaHQuYWRkIHVwXG4gICAgICAgIEBjZW50ZXJUYXJnZXQ/LmNvcHkgQGNlbnRlclxuICAgICAgICBAdXBkYXRlKClcbiAgICAgICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgIFxuICAgICMgMDAwICAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuICAgICAgICAgICAgICAgICAgICAgXG4gICAgZm9jdXNPblBvczogKHYpIC0+XG4gICAgICAgIFxuICAgICAgICBAY2VudGVyVGFyZ2V0ID0gbmV3IFZlY3RvcjMgdlxuICAgICAgICBAY2VudGVyID0gbmV3IFZlY3RvcjMgdlxuICAgICAgICBAdXBkYXRlKClcbiAgICAgICAgIFxuICAgIGZhZGVUb1BvczogKHYpIC0+IFxuICAgICAgICBAY2VudGVyVGFyZ2V0ID0gdi5jbG9uZSgpXG4gICAgICAgIEBzdGFydEZhZGVDZW50ZXIoKVxuXG4gICAgc3RhcnRGYWRlQ2VudGVyOiAtPiBcbiAgICAgICAgXG4gICAgICAgIGlmIG5vdCBAZmFkaW5nXG4gICAgICAgICAgICBAYW5pbWF0ZSBAZmFkZUNlbnRlclxuICAgICAgICAgICAgQGZhZGluZyA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZmFkZUNlbnRlcjogKGRlbHRhU2Vjb25kcykgPT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQGZhZGluZ1xuICAgICAgICBcbiAgICAgICAgQGNlbnRlci5sZXJwIEBjZW50ZXJUYXJnZXQsIGRlbHRhU2Vjb25kc1xuICAgICAgICBAdXBkYXRlKClcbiAgICAgICAgXG4gICAgICAgIGlmIEBjZW50ZXIuZGlzdGFuY2VUbyhAY2VudGVyVGFyZ2V0KSA+IDAuMDAxXG4gICAgICAgICAgICBAYW5pbWF0ZSBAZmFkZUNlbnRlclxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgQGZhZGluZ1xuXG4gICAgIyAwMCAgICAgMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMCAwMDAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgICAwMDAwMDAwICAgICAgIDAgICAgICAwMDAwMDAwMCAgXG4gICAgXG4gICAgbW92ZUZhY3RvcjogLT4gQGRpc3QvMlxuICAgIFxuICAgIHN0YXJ0TW92ZUxlZnQ6IC0+XG4gICAgICAgIFxuICAgICAgICBAbW92ZS54ID0gLUBtb3ZlRmFjdG9yKClcbiAgICAgICAgQHN0YXJ0TW92ZSgpXG4gICAgICAgIFxuICAgIHN0YXJ0TW92ZVJpZ2h0OiAtPlxuICAgICAgICBcbiAgICAgICAgQG1vdmUueCA9IEBtb3ZlRmFjdG9yKClcbiAgICAgICAgQHN0YXJ0TW92ZSgpXG5cbiAgICBzdGFydE1vdmVVcDogLT5cbiAgICAgICAgXG4gICAgICAgIEBtb3ZlLnkgPSBAbW92ZUZhY3RvcigpXG4gICAgICAgIEBzdGFydE1vdmUoKVxuICAgICAgICBcbiAgICBzdGFydE1vdmVEb3duOiAtPlxuICAgICAgICBcbiAgICAgICAgQG1vdmUueSA9IC1AbW92ZUZhY3RvcigpXG4gICAgICAgIEBzdGFydE1vdmUoKVxuXG4gICAgc3RhcnRNb3ZlRm9yd2FyZDogLT5cbiAgICAgICAgXG4gICAgICAgIEBtb3ZlLnogPSAtQG1vdmVGYWN0b3IoKVxuICAgICAgICBAc3RhcnRNb3ZlKClcbiAgICAgICAgXG4gICAgc3RhcnRNb3ZlQmFja3dhcmQ6IC0+XG4gICAgICAgIFxuICAgICAgICBAbW92ZS56ID0gIEBtb3ZlRmFjdG9yKClcbiAgICAgICAgQHN0YXJ0TW92ZSgpXG4gICAgICAgIFxuICAgIHN0b3BNb3Zpbmc6IC0+XG4gICAgICAgIFxuICAgICAgICBAbW92aW5nID0gZmFsc2VcbiAgICAgICAgQG1vdmUuc2V0IDAgMCAwXG4gICAgICAgXG4gICAgc3RhcnRNb3ZlOiAtPiBcbiAgICAgICAgXG4gICAgICAgIEBmYWRpbmcgPSBmYWxzZVxuICAgICAgICBpZiBub3QgQG1vdmluZ1xuICAgICAgICAgICAgQGFuaW1hdGUgQG1vdmVDZW50ZXJcbiAgICAgICAgICAgIEBtb3ZpbmcgPSB0cnVlXG4gICAgICAgICAgICBcbiAgICBtb3ZlQ2VudGVyOiAoZGVsdGFTZWNvbmRzKSA9PlxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlmIG5vdCBAbW92aW5nXG4gICAgICAgIFxuICAgICAgICBkaXIgPSBuZXcgVmVjdG9yM1xuICAgICAgICBkaXIuYWRkIEBtb3ZlXG5cbiAgICAgICAgZGlyLm11bHRpcGx5U2NhbGFyIGRlbHRhU2Vjb25kc1xuICAgICAgICBkaXIuYXBwbHlRdWF0ZXJuaW9uIEBxdWF0ZXJuaW9uXG4gICAgICAgIFxuICAgICAgICBAY2VudGVyLmFkZCBkaXJcbiAgICAgICAgQHVwZGF0ZSgpXG4gICAgICAgIFxuICAgICAgICBAbW92ZS5tdWx0aXBseVNjYWxhciAwLjk2XG4gICAgICAgIGlmIEBtb3ZlLmxlbmd0aCgpID4gMC4wMDFcbiAgICAgICAgICAgIEBhbmltYXRlIEBtb3ZlQ2VudGVyXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBzdG9wTW92aW5nKClcbiAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAgICBcbiAgICAjIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgICAgIFxuICAgICMgMDAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAgICBcbiAgICAjIDAwICAgICAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgIFxuICAgIFxuICAgIG9uTW91c2VXaGVlbDogKGV2ZW50KSA9PiBcbiAgICBcbiAgICAgICAgaWYgQHdoZWVsSW5lcnQgPiAwIGFuZCBldmVudC53aGVlbERlbHRhIDwgMFxuICAgICAgICAgICAgQHdoZWVsSW5lcnQgPSAwXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIFxuICAgICAgICBpZiBAd2hlZWxJbmVydCA8IDAgYW5kIGV2ZW50LndoZWVsRGVsdGEgPiAwXG4gICAgICAgICAgICBAd2hlZWxJbmVydCA9IDBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIEB3aGVlbEluZXJ0ICs9IGV2ZW50LndoZWVsRGVsdGEgKiAoMSsoQGRpc3QvQG1heERpc3QpKjMpICogMC4wMDAxXG4gICAgICAgIFxuICAgICAgICBAc3RhcnRab29tKClcblxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwICAgICAwMCAgXG4gICAgIyAgICAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjICAgMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMDAgIFxuICAgICMgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICBcblxuICAgIHN0YXJ0Wm9vbUluOiAtPlxuICAgICAgICBcbiAgICAgICAgQHdoZWVsSW5lcnQgPSAoMSsoQGRpc3QvQG1heERpc3QpKjMpKjEwXG4gICAgICAgIEBzdGFydFpvb20oKVxuICAgICAgICBcbiAgICBzdGFydFpvb21PdXQ6IC0+XG4gICAgICAgIFxuICAgICAgICBAd2hlZWxJbmVydCA9IC0oMSsoQGRpc3QvQG1heERpc3QpKjMpKjEwXG4gICAgICAgIEBzdGFydFpvb20oKVxuICAgIFxuICAgIHN0YXJ0Wm9vbTogLT4gXG4gICAgICAgIFxuICAgICAgICBpZiBub3QgQHpvb21pbmdcbiAgICAgICAgICAgIEBhbmltYXRlIEBpbmVydFpvb21cbiAgICAgICAgICAgIEB6b29taW5nID0gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgc3RvcFpvb206IC0+IFxuICAgICAgICBcbiAgICAgICAgQHdoZWVsSW5lcnQgPSAwXG4gICAgICAgIEB6b29taW5nID0gZmFsc2VcbiAgICBcbiAgICBpbmVydFpvb206IChkZWx0YVNlY29uZHMpID0+XG5cbiAgICAgICAgQHNldERpc3RGYWN0b3IgMSAtIGNsYW1wIC0wLjAyLCAwLjAyLCBAd2hlZWxJbmVydFxuICAgICAgICBAd2hlZWxJbmVydCA9IHJlZHVjZSBAd2hlZWxJbmVydCwgZGVsdGFTZWNvbmRzKjAuM1xuICAgICAgICBcbiAgICAgICAgaWYgYWJzKEB3aGVlbEluZXJ0KSA+IDAuMDAwMDFcbiAgICAgICAgICAgIEBhbmltYXRlIEBpbmVydFpvb21cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIEB6b29taW5nXG4gICAgICAgICAgICBAd2hlZWxJbmVydCA9IDBcbiAgICBcbiAgICBzZXREaXN0RmFjdG9yOiAoZmFjdG9yKSA9PlxuICAgICAgICBcbiAgICAgICAgQGRpc3QgPSBjbGFtcCBAbWluRGlzdCwgQG1heERpc3QsIEBkaXN0KmZhY3RvclxuICAgICAgICBAdXBkYXRlKClcbiAgICAgICAgXG4gICAgc2V0Rm92OiAoZm92KSAtPiBAZm92ID0gbWF4KDIuMCwgbWluIGZvdiwgMTc1LjApXG4gICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAgICAgICAgIDAwMDAwMDAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICBcbiAgICBcbiAgICB1cGRhdGU6IC0+IFxuICAgICAgICBcbiAgICAgICAgQGRlZ3JlZSA9IGNsYW1wIC05MCA5MCBAZGVncmVlXG4gICAgICAgIFxuICAgICAgICBAcXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlIG5ldyBWZWN0b3IzKDAgMSAwKSwgZGVnMnJhZCBAcm90YXRlXG5cbiAgICAgICAgcGl0Y2hSb3QgPSBuZXcgUXVhdGVybmlvblxuICAgICAgICBwaXRjaFJvdC5zZXRGcm9tQXhpc0FuZ2xlIG5ldyBWZWN0b3IzKDEgMCAwKSwgZGVnMnJhZCBAZGVncmVlXG4gICAgICAgIFxuICAgICAgICBAcXVhdGVybmlvbi5tdWx0aXBseSBwaXRjaFJvdFxuICAgICAgICBcbiAgICAgICAgQHBvc2l0aW9uLmNvcHkgQGNlbnRlclxuICAgICAgICBAcG9zaXRpb24uYWRkIG5ldyBWZWN0b3IzKDAgMCBAZGlzdCkuYXBwbHlRdWF0ZXJuaW9uIEBxdWF0ZXJuaW9uXG4gICAgICAgIFxuICAgICAgICBwcmVmcy5zZXQgJ2NhbWVyYeKWuGRpc3QnICAgQGRpc3RcbiAgICAgICAgcHJlZnMuc2V0ICdjYW1lcmHilrhkZWdyZWUnIEBkZWdyZWVcbiAgICAgICAgcHJlZnMuc2V0ICdjYW1lcmHilrhyb3RhdGUnIEByb3RhdGVcbiAgICAgICAgXG4gICAgICAgICMgbG9nIFwiY2FtZXJhOlwiLCBAZGlzdCwgQHJvdGF0ZSwgQGRlZ3JlZVxuXG5tb2R1bGUuZXhwb3J0cyA9IENhbWVyYVxuIl19
//# sourceURL=../coffee/camera.coffee