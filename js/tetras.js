// koffee 1.12.0

/*
000000000  00000000  000000000  00000000    0000000    0000000
   000     000          000     000   000  000   000  000     
   000     0000000      000     0000000    000000000  0000000 
   000     000          000     000   000  000   000       000
   000     00000000     000     000   000  000   000  0000000
 */
var BufferGeometry, Float32BufferAttribute, LineSegments, Mesh, MeshStandardMaterial, Points, PointsMaterial, Tetras, WireframeGeometry, klog, ref;

klog = require('kxk').klog;

ref = require('three'), BufferGeometry = ref.BufferGeometry, Float32BufferAttribute = ref.Float32BufferAttribute, LineSegments = ref.LineSegments, Mesh = ref.Mesh, MeshStandardMaterial = ref.MeshStandardMaterial, Points = ref.Points, PointsMaterial = ref.PointsMaterial, WireframeGeometry = ref.WireframeGeometry;

Tetras = (function() {
    function Tetras() {}

    Tetras.renderScene = function(scene) {
        var cubevert, cubindx, frame, geometry, i, indices, j, k, l, line, m, material, mesh, n, pmat, points, tetraind, vertices, verts;
        material = new MeshStandardMaterial({
            metalness: 0.5,
            roughness: 0.5,
            flatShading: true,
            vertexColors: true
        });
        cubevert = [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1];
        tetraind = [0, 1, 5, 1, 0, 2, 5, 2, 0, 2, 5, 1, 4, 0, 5, 0, 4, 2, 2, 5, 0, 5, 2, 4, 4, 6, 2, 6, 4, 5, 5, 2, 6, 2, 5, 4, 1, 3, 5, 3, 1, 2, 2, 5, 3, 5, 2, 1, 3, 7, 5, 7, 3, 2, 5, 2, 3, 2, 5, 7, 6, 7, 2, 7, 6, 5, 2, 5, 6, 5, 2, 7];
        frame = function(x, y, z) {
            return [x, y, z, x + 1, y, z, x, y + 1, z, x + 1, y + 1, z, x, y, z + 1, x + 1, y, z + 1, x, y + 1, z + 1, x + 1, y + 1, z + 1];
        };
        vertices = [];
        indices = [];
        points = [];
        for (i = k = 0; k <= 15; i = ++k) {
            for (j = l = 0; l <= 15; j = ++l) {
                indices = indices.concat(tetraind.map(function(idx) {
                    return idx + vertices.length / 3;
                }));
                vertices = vertices.concat(frame(i * 2, 0, j * 2));
                if ((i + j * 16) & 1) {
                    points.push(i * 2, 0, j * 2);
                }
                if ((i + j * 16) & 2) {
                    points.push(i * 2 + 1, 0, j * 2);
                }
                if ((i + j * 16) & 4) {
                    points.push(i * 2, 1, j * 2);
                }
                if ((i + j * 16) & 8) {
                    points.push(i * 2 + 1, 1, j * 2);
                }
                if ((i + j * 16) & 16) {
                    points.push(i * 2, 0, j * 2 + 1);
                }
                if ((i + j * 16) & 32) {
                    points.push(i * 2 + 1, 0, j * 2 + 1);
                }
                if ((i + j * 16) & 64) {
                    points.push(i * 2, 1, j * 2 + 1);
                }
                if ((i + j * 16) & 128) {
                    points.push(i * 2 + 1, 1, j * 2 + 1);
                }
            }
        }
        geometry = new BufferGeometry();
        geometry.setIndex(indices);
        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('color', new Float32BufferAttribute(vertices, 3));
        line = new LineSegments(new WireframeGeometry(geometry));
        line.material.depthTest = false;
        line.material.opacity = 0.05;
        line.material.transparent = true;
        scene.add(line);
        geometry = new BufferGeometry();
        geometry.setAttribute('position', new Float32BufferAttribute(points, 3));
        pmat = new PointsMaterial({
            color: 0xffff88
        });
        pmat.size = 0.1;
        pmat.depthTest = false;
        pmat.opacity = 0.5;
        pmat.transparent = true;
        scene.add(new Points(geometry, pmat));
        verts = function(x0, y0, z0) {
            var len, m, ref1, v, x1, xh, y1, yh, z1, zh;
            v = [];
            xh = x0 + 0.5;
            x1 = x0 + 1.0;
            yh = y0 + 0.5;
            y1 = y0 + 1.0;
            zh = z0 + 0.5;
            z1 = z0 + 1.0;
            v.push(x0, yh, z0, x1, yh, z0, x0, yh, z1, x1, yh, z1);
            ref1 = [0.5, 1.0, 0.0];
            for (m = 0, len = ref1.length; m < len; m++) {
                j = ref1[m];
                v.push(xh, y0 + j, zh);
                v.push(xh, y0 + j, z0);
                v.push(x1, y0 + j, zh);
                v.push(xh, y0 + j, z1);
                v.push(x0, y0 + j, zh);
            }
            return v;
        };
        vertices = [];
        indices = [];
        for (i = m = 0; m <= 15; i = ++m) {
            for (j = n = 0; n <= 15; j = ++n) {
                cubindx = this.cube(i + j * 16).map(function(idx) {
                    return idx + vertices.length / 3;
                });
                indices = indices.concat(cubindx);
                vertices = vertices.concat(verts(i * 2, 0, j * 2));
            }
        }
        geometry = new BufferGeometry();
        geometry.setIndex(indices);
        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('color', new Float32BufferAttribute(vertices, 3));
        mesh = new Mesh(geometry, material);
        return scene.add(mesh);
    };

    Tetras.cube = function(index) {
        var i, indices, inouts, k, ref1, tetra1, tetra2, tetra3, tetra4, tetra5, tetra6, tetras;
        tetras = [];
        inouts = [];
        tetra1 = ((index & 4) >> 2) | ((index & 1) << 1) | ((index & 2) << 1) | ((index & 32) >> 2);
        tetra2 = ((index & 4) >> 2) | ((index & 1) << 1) | ((index & 16) >> 2) | ((index & 32) >> 2);
        tetra3 = ((index & 4) >> 2) | ((index & 64) >> 5) | ((index & 16) >> 2) | ((index & 32) >> 2);
        tetra4 = ((index & 4) >> 2) | ((index & 8) >> 2) | ((index & 2) << 1) | ((index & 32) >> 2);
        tetra5 = ((index & 4) >> 2) | ((index & 8) >> 2) | ((index & 128) >> 5) | ((index & 32) >> 2);
        tetra6 = ((index & 4) >> 2) | ((index & 64) >> 5) | ((index & 128) >> 5) | ((index & 32) >> 2);
        if (tetra1 && tetra1 !== 0xf) {
            tetras.push(0);
            inouts.push(tetra1);
        }
        if (tetra2 && tetra2 !== 0xf) {
            tetras.push(1);
            inouts.push(tetra2);
        }
        if (tetra3 && tetra3 !== 0xf) {
            tetras.push(2);
            inouts.push(tetra3);
        }
        if (tetra4 && tetra4 !== 0xf) {
            tetras.push(3);
            inouts.push(tetra4);
        }
        if (tetra5 && tetra5 !== 0xf) {
            tetras.push(4);
            inouts.push(tetra5);
        }
        if (tetra6 && tetra6 !== 0xf) {
            tetras.push(5);
            inouts.push(tetra6);
        }
        indices = [];
        for (i = k = 0, ref1 = tetras.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
            indices = indices.concat(this.tetra(tetras[i], inouts[i]));
        }
        return indices;
    };

    Tetras.tetra = function(tetra, io) {
        var a, i, ref1, ref2;
        i = io > 7 ? 14 - io : io - 1;
        a = [[[0, 5, 4], [0, 14, 15], [4, 14, 15, 4, 15, 5], [5, 15, 16], [4, 15, 16, 4, 0, 15], [5, 14, 16, 5, 0, 14], [4, 14, 16]], [[0, 4, 8], [0, 18, 14], [8, 18, 14, 8, 14, 4], [8, 17, 18], [0, 17, 18, 0, 4, 17], [8, 17, 14, 8, 14, 0], [4, 17, 14]], [[4, 13, 8], [2, 13, 7], [7, 2, 8, 7, 8, 4], [2, 17, 8], [17, 13, 2, 17, 4, 13], [7, 17, 8, 7, 8, 13], [4, 7, 17]], [[4, 5, 10], [1, 6, 10], [6, 4, 5, 6, 5, 1], [1, 5, 16], [1, 10, 4, 1, 4, 16], [6, 10, 5, 6, 5, 16], [6, 4, 16]], [[4, 10, 9], [6, 11, 10], [4, 6, 11, 4, 11, 9], [3, 9, 11], [4, 10, 11, 4, 11, 3], [6, 3, 9, 6, 9, 10], [3, 4, 6]], [[4, 9, 13], [7, 13, 12], [4, 9, 12, 4, 12, 7], [3, 12, 9], [4, 3, 12, 4, 12, 13], [9, 3, 7, 9, 7, 13], [3, 7, 4]]][tetra][i];
        if (io > 7) {
            ref1 = [a[2], a[1]], a[1] = ref1[0], a[2] = ref1[1];
            if (a.length > 3) {
                ref2 = [a[5], a[4]], a[4] = ref2[0], a[5] = ref2[1];
            }
        }
        return a;
    };

    return Tetras;

})();

module.exports = Tetras;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/tetras.coffee