// koffee 1.12.0

/*
000000000  00000000  000000000  00000000    0000000    0000000
   000     000          000     000   000  000   000  000     
   000     0000000      000     0000000    000000000  0000000 
   000     000          000     000   000  000   000       000
   000     00000000     000     000   000  000   000  0000000
 */
var BufferAttribute, BufferGeometry, CUBE, Float32BufferAttribute, LineSegments, Mesh, MeshStandardMaterial, OFFSET, Points, PointsMaterial, TETRA, Tetras, Uint32BufferAttribute, Vector3, WireframeGeometry, klog, ref, sin;

klog = require('kxk').klog;

ref = require('three'), BufferAttribute = ref.BufferAttribute, BufferGeometry = ref.BufferGeometry, Float32BufferAttribute = ref.Float32BufferAttribute, LineSegments = ref.LineSegments, Mesh = ref.Mesh, MeshStandardMaterial = ref.MeshStandardMaterial, Points = ref.Points, PointsMaterial = ref.PointsMaterial, Uint32BufferAttribute = ref.Uint32BufferAttribute, Vector3 = ref.Vector3, WireframeGeometry = ref.WireframeGeometry;

sin = Math.sin;

TETRA = [[[0, 5, 4], [0, 14, 15], [4, 14, 15, 4, 15, 5], [5, 15, 16], [4, 15, 16, 4, 0, 15], [5, 14, 16, 5, 0, 14], [4, 14, 16]], [[0, 4, 8], [0, 18, 14], [8, 18, 14, 8, 14, 4], [8, 17, 18], [0, 17, 18, 0, 4, 17], [8, 17, 14, 8, 14, 0], [4, 17, 14]], [[4, 13, 8], [2, 13, 7], [7, 2, 8, 7, 8, 4], [2, 17, 8], [17, 13, 2, 17, 4, 13], [7, 17, 8, 7, 8, 13], [4, 7, 17]], [[4, 5, 10], [1, 6, 10], [6, 4, 5, 6, 5, 1], [1, 5, 16], [1, 10, 4, 1, 4, 16], [6, 10, 5, 6, 5, 16], [6, 4, 16]], [[4, 10, 9], [6, 11, 10], [4, 6, 11, 4, 11, 9], [3, 9, 11], [4, 10, 11, 4, 11, 3], [6, 3, 9, 6, 9, 10], [3, 4, 6]], [[4, 9, 13], [7, 13, 12], [4, 9, 12, 4, 12, 7], [3, 12, 9], [4, 3, 12, 4, 12, 13], [9, 3, 7, 9, 7, 13], [3, 7, 4]]];

CUBE = [[4, 3, 1, 0, 2, 0, 32, 3], [4, 3, 1, 0, 16, 3, 32, 3], [4, 3, 64, 6, 16, 3, 32, 3], [4, 3, 8, 3, 2, 0, 32, 3], [4, 3, 8, 3, 128, 6, 32, 3], [4, 3, 64, 6, 128, 6, 32, 3]];

OFFSET = [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1];

Tetras = (function() {
    function Tetras() {}

    Tetras.vertices = [];

    Tetras.indices = [];

    Tetras.points = [];

    Tetras.renderScene = function(scene) {
        var geometry, i, j, k, l, m, n, p, pmat, points, q, ref1, ref2, ref3, ref4, ref5, ref6, s;
        if (false) {
            this.debugGrid(scene);
        }
        this.cubeSize = 40;
        this.vertices = new Float32Array(this.cubeSize * this.cubeSize * this.cubeSize * 3 * 19);
        this.indices = new Uint32Array(this.cubeSize * this.cubeSize * this.cubeSize * 3 * 6 * 2);
        this.vertex = 0;
        this.index = 0;
        if (true) {
            this.vertex = 0;
            this.index = 0;
            for (i = l = 0, ref1 = this.cubeSize; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
                for (j = m = 0, ref2 = this.cubeSize; 0 <= ref2 ? m < ref2 : m > ref2; j = 0 <= ref2 ? ++m : --m) {
                    for (k = n = 0, ref3 = this.cubeSize; 0 <= ref3 ? n < ref3 : n > ref3; k = 0 <= ref3 ? ++n : --n) {
                        this.addCube(this.cubeAt(i, j, k), i, j, k);
                    }
                }
            }
            klog("vertex " + this.vertex + " index " + this.index + " tris " + ((this.index + 1) / 3) + " buffers", this.vertices.length, this.indices.length);
            geometry = new BufferGeometry();
            geometry.setIndex(new Uint32BufferAttribute(this.indices.slice(0, this.index), 1));
            geometry.setAttribute('position', new BufferAttribute(this.vertices, 3));
            scene.add(new Mesh(geometry, new MeshStandardMaterial({
                metalness: 0.0,
                roughness: 1.0,
                color: 0x333333,
                flatShading: true
            })));
        }
        if (false) {
            points = [];
            for (i = p = 0, ref4 = this.cubeSize; 0 <= ref4 ? p < ref4 : p > ref4; i = 0 <= ref4 ? ++p : --p) {
                for (j = q = 0, ref5 = this.cubeSize; 0 <= ref5 ? q < ref5 : q > ref5; j = 0 <= ref5 ? ++q : --q) {
                    for (k = s = 0, ref6 = this.cubeSize; 0 <= ref6 ? s < ref6 : s > ref6; k = 0 <= ref6 ? ++s : --s) {
                        if (this.cubeAt(i, j, k) & 1) {
                            points.push(i, j, k);
                        }
                    }
                }
            }
            geometry = new BufferGeometry();
            geometry.setAttribute('position', new Float32BufferAttribute(points, 3));
            pmat = new PointsMaterial({
                color: 0xffff88
            });
            pmat.size = 0.1;
            pmat.depthTest = false;
            pmat.opacity = 0.5;
            pmat.transparent = true;
            return scene.add(new Points(geometry, pmat));
        }
    };

    Tetras.cubeAt = function(i, j, k) {
        var a, c, l, v, x, y, z;
        c = 0;
        for (a = l = 0; l <= 7; a = ++l) {
            x = i + OFFSET[a * 3 + 0];
            y = j + OFFSET[a * 3 + 1];
            z = k + OFFSET[a * 3 + 2];
            v = new Vector3(x, y, z);
            v.add(new Vector3(0.5, 0.5, 0.5));
            v.sub(new Vector3(this.cubeSize / 2, this.cubeSize / 2, this.cubeSize / 2));
            c |= ((sin(x + y) * 4.0 <= z) && 1 || 0) << a;
        }
        return c;
    };

    Tetras.addCube = function(index, x, y, z) {
        var i, j, l, len, m, n, r, ref1, results, t, ti, x1, xh, y1, yh, z1, zh;
        for (ti = l = 0; l <= 5; ti = ++l) {
            t = CUBE[ti];
            r = 0;
            for (i = m = 0; m <= 6; i = m += 2) {
                r |= ((index & t[i]) << 1) >> t[i + 1];
            }
            if (r && r !== 0xf) {
                this.tetra(ti, r);
            }
        }
        xh = x + 0.5;
        x1 = x + 1;
        yh = y + 0.5;
        y1 = y + 1;
        zh = z + 0.5;
        z1 = z + 1;
        this.vertices[this.vertex++] = x;
        this.vertices[this.vertex++] = yh;
        this.vertices[this.vertex++] = z;
        this.vertices[this.vertex++] = x1;
        this.vertices[this.vertex++] = yh;
        this.vertices[this.vertex++] = z;
        this.vertices[this.vertex++] = x;
        this.vertices[this.vertex++] = yh;
        this.vertices[this.vertex++] = z1;
        this.vertices[this.vertex++] = x1;
        this.vertices[this.vertex++] = yh;
        this.vertices[this.vertex++] = z1;
        ref1 = [0.5, 1, 0];
        results = [];
        for (n = 0, len = ref1.length; n < len; n++) {
            j = ref1[n];
            this.vertices[this.vertex++] = xh;
            this.vertices[this.vertex++] = y + j;
            this.vertices[this.vertex++] = zh;
            this.vertices[this.vertex++] = xh;
            this.vertices[this.vertex++] = y + j;
            this.vertices[this.vertex++] = z;
            this.vertices[this.vertex++] = x1;
            this.vertices[this.vertex++] = y + j;
            this.vertices[this.vertex++] = zh;
            this.vertices[this.vertex++] = xh;
            this.vertices[this.vertex++] = y + j;
            this.vertices[this.vertex++] = z1;
            this.vertices[this.vertex++] = x;
            this.vertices[this.vertex++] = y + j;
            results.push(this.vertices[this.vertex++] = zh);
        }
        return results;
    };

    Tetras.tetra = function(tetra, io) {
        var a, i, l, m, o, ref1, ref2, results, results1;
        o = this.vertex / 3;
        if (io <= 7) {
            a = TETRA[tetra][io - 1];
            results = [];
            for (i = l = 0, ref1 = a.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
                results.push(this.indices[this.index++] = a[i] + o);
            }
            return results;
        } else {
            a = TETRA[tetra][14 - io];
            results1 = [];
            for (i = m = 0, ref2 = a.length; m <= ref2; i = m += 3) {
                this.indices[this.index++] = a[i + 0] + o;
                this.indices[this.index++] = a[i + 2] + o;
                results1.push(this.indices[this.index++] = a[i + 1] + o);
            }
            return results1;
        }
    };

    Tetras.debugGrid = function(scene) {
        var cubevert, frame, geometry, i, indices, j, l, line, m, mesh, n, p, pmat, points, tetraind, vertices;
        cubevert = [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1];
        tetraind = [0, 1, 5, 1, 0, 2, 5, 2, 0, 2, 5, 1, 4, 0, 5, 0, 4, 2, 2, 5, 0, 5, 2, 4, 4, 6, 2, 6, 4, 5, 5, 2, 6, 2, 5, 4, 1, 3, 5, 3, 1, 2, 2, 5, 3, 5, 2, 1, 3, 7, 5, 7, 3, 2, 5, 2, 3, 2, 5, 7, 6, 7, 2, 7, 6, 5, 2, 5, 6, 5, 2, 7];
        frame = function(x, y, z) {
            return [x, y, z, x + 1, y, z, x, y + 1, z, x + 1, y + 1, z, x, y, z + 1, x + 1, y, z + 1, x, y + 1, z + 1, x + 1, y + 1, z + 1];
        };
        indices = [];
        vertices = [];
        points = [];
        for (i = l = 0; l <= 15; i = ++l) {
            for (j = m = 0; m <= 15; j = ++m) {
                indices = indices.concat(tetraind.map(function(idx) {
                    return idx + vertices.length / 3;
                }));
                vertices = vertices.concat(frame(i * 2, 0, j * 2));
                if ((i + j * 16) & 1) {
                    this.points.push(i * 2, 0, j * 2);
                }
                if ((i + j * 16) & 2) {
                    this.points.push(i * 2 + 1, 0, j * 2);
                }
                if ((i + j * 16) & 4) {
                    this.points.push(i * 2, 1, j * 2);
                }
                if ((i + j * 16) & 8) {
                    this.points.push(i * 2 + 1, 1, j * 2);
                }
                if ((i + j * 16) & 16) {
                    this.points.push(i * 2, 0, j * 2 + 1);
                }
                if ((i + j * 16) & 32) {
                    this.points.push(i * 2 + 1, 0, j * 2 + 1);
                }
                if ((i + j * 16) & 64) {
                    this.points.push(i * 2, 1, j * 2 + 1);
                }
                if ((i + j * 16) & 128) {
                    this.points.push(i * 2 + 1, 1, j * 2 + 1);
                }
            }
        }
        geometry = new BufferGeometry();
        geometry.setIndex(indices);
        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('color', new Float32BufferAttribute(vertices, 3));
        line = new LineSegments(new WireframeGeometry(geometry));
        line.material.depthTest = false;
        line.material.opacity = 0.05;
        line.material.transparent = true;
        scene.add(line);
        geometry = new BufferGeometry();
        geometry.setAttribute('position', new Float32BufferAttribute(points, 3));
        pmat = new PointsMaterial({
            color: 0xffff88
        });
        pmat.size = 0.1;
        pmat.depthTest = false;
        pmat.opacity = 0.5;
        pmat.transparent = true;
        scene.add(new Points(geometry, pmat));
        this.vertices = new Float32Array(16 * 16 * 3 * 19);
        this.indices = new Uint32Array(16 * 16 * 3 * 6 * 2);
        this.vertex = 0;
        this.index = 0;
        for (i = n = 0; n <= 15; i = ++n) {
            for (j = p = 0; p <= 15; j = ++p) {
                this.addCube(i + j * 16, i * 2, 0, j * 2);
            }
        }
        geometry = new BufferGeometry();
        geometry.setIndex(new Uint32BufferAttribute(this.indices.slice(0, this.index), 1));
        geometry.setAttribute('position', new BufferAttribute(this.vertices, 3));
        geometry.setAttribute('color', new BufferAttribute(this.vertices, 3));
        mesh = new Mesh(geometry, new MeshStandardMaterial({
            metalness: 0.5,
            roughness: 0.5,
            flatShading: true,
            vertexColors: true
        }));
        return scene.add(mesh);
    };

    return Tetras;

})();

module.exports = Tetras;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/tetras.coffee