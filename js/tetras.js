// koffee 1.12.0

/*
000000000  00000000  000000000  00000000    0000000    0000000
   000     000          000     000   000  000   000  000     
   000     0000000      000     0000000    000000000  0000000 
   000     000          000     000   000  000   000       000
   000     00000000     000     000   000  000   000  0000000
 */
var BufferGeometry, CUBE, Float32BufferAttribute, LineSegments, Mesh, MeshStandardMaterial, Points, PointsMaterial, TETRA, Tetras, WireframeGeometry, klog, ref;

klog = require('kxk').klog;

ref = require('three'), BufferGeometry = ref.BufferGeometry, Float32BufferAttribute = ref.Float32BufferAttribute, LineSegments = ref.LineSegments, Mesh = ref.Mesh, MeshStandardMaterial = ref.MeshStandardMaterial, Points = ref.Points, PointsMaterial = ref.PointsMaterial, WireframeGeometry = ref.WireframeGeometry;

TETRA = [[[0, 5, 4], [0, 14, 15], [4, 14, 15, 4, 15, 5], [5, 15, 16], [4, 15, 16, 4, 0, 15], [5, 14, 16, 5, 0, 14], [4, 14, 16]], [[0, 4, 8], [0, 18, 14], [8, 18, 14, 8, 14, 4], [8, 17, 18], [0, 17, 18, 0, 4, 17], [8, 17, 14, 8, 14, 0], [4, 17, 14]], [[4, 13, 8], [2, 13, 7], [7, 2, 8, 7, 8, 4], [2, 17, 8], [17, 13, 2, 17, 4, 13], [7, 17, 8, 7, 8, 13], [4, 7, 17]], [[4, 5, 10], [1, 6, 10], [6, 4, 5, 6, 5, 1], [1, 5, 16], [1, 10, 4, 1, 4, 16], [6, 10, 5, 6, 5, 16], [6, 4, 16]], [[4, 10, 9], [6, 11, 10], [4, 6, 11, 4, 11, 9], [3, 9, 11], [4, 10, 11, 4, 11, 3], [6, 3, 9, 6, 9, 10], [3, 4, 6]], [[4, 9, 13], [7, 13, 12], [4, 9, 12, 4, 12, 7], [3, 12, 9], [4, 3, 12, 4, 12, 13], [9, 3, 7, 9, 7, 13], [3, 7, 4]]];

CUBE = [[4, 3, 1, 0, 2, 0, 32, 3], [4, 3, 1, 0, 16, 3, 32, 3], [4, 3, 64, 6, 16, 3, 32, 3], [4, 3, 8, 3, 2, 0, 32, 3], [4, 3, 8, 3, 128, 6, 32, 3], [4, 3, 64, 6, 128, 6, 32, 3]];

Tetras = (function() {
    function Tetras() {}

    Tetras.vertices = [];

    Tetras.indices = [];

    Tetras.points = [];

    Tetras.renderScene = function(scene) {
        var geometry, i, j, k, l, m, material, mesh, n;
        material = new MeshStandardMaterial({
            metalness: 0.5,
            roughness: 0.5,
            flatShading: true
        });
        this.vertices = [];
        this.indices = [];
        this.points = [];
        if (false) {
            this.debugGrid(scene);
        }
        klog('cubes');
        if (koffee_53_8 = process.hrtime.bigint()) {
            for (i = l = 0; l <= 15; i = ++l) {
                for (j = m = 0; m <= 15; j = ++m) {
                    for (k = n = 0; n <= 15; k = ++n) {
                        this.addCube(i + j + k, i, j, k);
                    }
                }
            }
            klog('cubes', (function(b){ let f=1000n; for (let u of ['ns','Î¼s','ms','s']) { if (u=='s' || b<f) { return ''+(1000n*b/f)+' '+u; } f*=1000n; }})(process.hrtime.bigint()-koffee_53_8));
        };
        geometry = new BufferGeometry();
        geometry.setIndex(this.indices);
        geometry.setAttribute('position', new Float32BufferAttribute(this.vertices, 3));
        mesh = new Mesh(geometry, material);
        return scene.add(mesh);
    };

    Tetras.addCube = function(index, x, y, z) {
        var i, j, l, len, m, n, r, ref1, results, t, ti, x1, xh, y1, yh, z1, zh;
        for (ti = l = 0; l <= 5; ti = ++l) {
            t = CUBE[ti];
            r = 0;
            for (i = m = 0; m <= 6; i = m += 2) {
                r |= ((index & t[i]) << 1) >> t[i + 1];
            }
            if (r && r !== 0xf) {
                this.tetra(ti, r);
            }
        }
        xh = x + 0.5;
        x1 = x + 1;
        yh = y + 0.5;
        y1 = y + 1;
        zh = z + 0.5;
        z1 = z + 1;
        this.vertices.push(x, yh, z, x1, yh, z, x, yh, z1, x1, yh, z1);
        ref1 = [0.5, 1, 0];
        results = [];
        for (n = 0, len = ref1.length; n < len; n++) {
            j = ref1[n];
            results.push(this.vertices.push(xh, y + j, zh, xh, y + j, z, x1, y + j, zh, xh, y + j, z1, x, y + j, zh));
        }
        return results;
    };

    Tetras.tetra = function(tetra, io) {
        var a, i, l, m, o, ref1, ref2, results, results1;
        o = this.vertices.length / 3;
        if (io <= 7) {
            a = TETRA[tetra][io - 1];
            results = [];
            for (i = l = 0, ref1 = a.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
                results.push(this.indices.push(a[i] + o));
            }
            return results;
        } else {
            a = TETRA[tetra][14 - io];
            results1 = [];
            for (i = m = 0, ref2 = a.length / 3; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
                this.indices.push(a[i] + o);
                this.indices.push(a[i + 2] + o);
                results1.push(this.indices.push(a[i + 1] + o));
            }
            return results1;
        }
    };

    Tetras.debugGrid = function(scene) {
        var cubevert, frame, geometry, i, j, l, line, m, n, pmat, results, tetraind;
        cubevert = [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1];
        tetraind = [0, 1, 5, 1, 0, 2, 5, 2, 0, 2, 5, 1, 4, 0, 5, 0, 4, 2, 2, 5, 0, 5, 2, 4, 4, 6, 2, 6, 4, 5, 5, 2, 6, 2, 5, 4, 1, 3, 5, 3, 1, 2, 2, 5, 3, 5, 2, 1, 3, 7, 5, 7, 3, 2, 5, 2, 3, 2, 5, 7, 6, 7, 2, 7, 6, 5, 2, 5, 6, 5, 2, 7];
        frame = function(x, y, z) {
            return [x, y, z, x + 1, y, z, x, y + 1, z, x + 1, y + 1, z, x, y, z + 1, x + 1, y, z + 1, x, y + 1, z + 1, x + 1, y + 1, z + 1];
        };
        for (i = l = 0; l <= 15; i = ++l) {
            for (j = m = 0; m <= 15; j = ++m) {
                this.indices = this.indices.concat(tetraind.map((function(_this) {
                    return function(idx) {
                        return idx + _this.vertices.length / 3;
                    };
                })(this)));
                this.vertices = this.vertices.concat(frame(i * 2, 0, j * 2));
                if ((i + j * 16) & 1) {
                    this.points.push(i * 2, 0, j * 2);
                }
                if ((i + j * 16) & 2) {
                    this.points.push(i * 2 + 1, 0, j * 2);
                }
                if ((i + j * 16) & 4) {
                    this.points.push(i * 2, 1, j * 2);
                }
                if ((i + j * 16) & 8) {
                    this.points.push(i * 2 + 1, 1, j * 2);
                }
                if ((i + j * 16) & 16) {
                    this.points.push(i * 2, 0, j * 2 + 1);
                }
                if ((i + j * 16) & 32) {
                    this.points.push(i * 2 + 1, 0, j * 2 + 1);
                }
                if ((i + j * 16) & 64) {
                    this.points.push(i * 2, 1, j * 2 + 1);
                }
                if ((i + j * 16) & 128) {
                    this.points.push(i * 2 + 1, 1, j * 2 + 1);
                }
            }
        }
        geometry = new BufferGeometry();
        geometry.setIndex(this.indices);
        geometry.setAttribute('position', new Float32BufferAttribute(this.vertices, 3));
        geometry.setAttribute('color', new Float32BufferAttribute(this.vertices, 3));
        line = new LineSegments(new WireframeGeometry(geometry));
        line.material.depthTest = false;
        line.material.opacity = 0.05;
        line.material.transparent = true;
        scene.add(line);
        geometry = new BufferGeometry();
        geometry.setAttribute('position', new Float32BufferAttribute(this.points, 3));
        pmat = new PointsMaterial({
            color: 0xffff88
        });
        pmat.size = 0.1;
        pmat.depthTest = false;
        pmat.opacity = 0.5;
        pmat.transparent = true;
        scene.add(new Points(geometry, pmat));
        this.vertices = [];
        this.indices = [];
        results = [];
        for (i = n = 0; n <= 15; i = ++n) {
            results.push((function() {
                var p, results1;
                results1 = [];
                for (j = p = 0; p <= 15; j = ++p) {
                    results1.push(this.addCube(i + j * 16, i * 2, 0, j * 2));
                }
                return results1;
            }).call(this));
        }
        return results;
    };

    return Tetras;

})();

module.exports = Tetras;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/tetras.coffee